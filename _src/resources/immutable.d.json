{"Immutable":{"doc":{"synopsis":"<p>Immutable data encourages pure functions (data-in, data-out) and lends itself\nto much simpler application development and enabling techniques from\nfunctional programming such as lazy evaluation.</p>\n","description":"<p>While designed to bring these powerful functional concepts to JavaScript, it\npresents an Object-Oriented API familiar to Javascript engineers and closely\nmirroring that of Array, Map, and Set. It is easy and efficient to convert to\nand from plain Javascript types.</p>\n"},"module":{"fromJS":{"call":{"signatures":[{"params":[{"name":"json","type":{"k":0}},{"name":"reviver","optional":true,"type":{"k":6,"params":[{"name":"k","type":{"k":0}},{"name":"v","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}}],"type":{"k":0}}}],"type":{"k":0},"line":21}],"doc":{"synopsis":"<p>Deeply converts plain JS objects and arrays to Immutable Maps and Lists.</p>\n","description":"<p>If a <code>reviver</code> is optionally provided, it will be called with every\ncollection as a Seq (beginning with the most nested collections\nand proceeding to the top-level collection itself), along with the key\nrefering to each collection and the parent JS object provided as <code>this</code>.\nFor the top level, object, the key will be &quot;&quot;. This <code>reviver</code> is expected\nto return a new Immutable Iterable, allowing for custom convertions from\ndeep JS objects.</p>\n<p>This example converts JSON to List and OrderedMap:</p>\n<code class=\"codeBlock\">Immutable<span class=\"token punctuation\" >.</span><span class=\"token function\" >fromJS<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span>b<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >20</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >30</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token number\" >40</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token block-keyword\" >function</span> <span class=\"token punctuation\" >(</span>key<span class=\"token punctuation\" >,</span> value<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >var</span> isIndexed <span class=\"token operator\" >=</span> Immutable<span class=\"token punctuation\" >.</span>Iterable<span class=\"token punctuation\" >.</span><span class=\"token function\" >isIndexed<span class=\"token punctuation\" >(</span></span>value<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n  <span class=\"token keyword\" >return</span> isIndexed <span class=\"token operator\" >?</span> value<span class=\"token punctuation\" >.</span><span class=\"token function\" >toList<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >:</span> value<span class=\"token punctuation\" >.</span><span class=\"token function\" >toOrderedMap<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// true, \"b\", {b: [10, 20, 30]}\n</span><span class=\"token comment\" spellcheck=\"true\">// false, \"a\", {a: {b: [10, 20, 30]}, c: 40}\n</span><span class=\"token comment\" spellcheck=\"true\">// false, \"\", {\"\": {a: {b: [10, 20, 30]}, c: 40}}</span></code><p>If <code>reviver</code> is not provided, the default behavior will convert Arrays into\nLists and Objects into Maps.</p>\n<p><code>reviver</code> acts similarly to <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Example.3A_Using_the_reviver_parameter\"><code>JSON.parse</code></a>.</p>\n<p><code>Immutable.fromJS</code> is conservative in it&#39;s conversion. It will only convert\narrays which pass <code>Array.isArray</code> to Lists, and only raw objects (no custom\nprototype) to Map.</p>\n"}}},"is":{"call":{"signatures":[{"params":[{"name":"first","type":{"k":0}},{"name":"second","type":{"k":0}}],"type":{"k":1},"line":57}],"doc":{"synopsis":"<p>Vaule equality check with semantics similar to Object.is(), but treats\nImmutable collections and sequences as values, equal if the second\nImmutable iterable contains equivalent values. It&#39;s used throughout when\nchecking for equality.</p>\n","description":"<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> map1 <span class=\"token operator\" >=</span> Immutable<span class=\"token punctuation\" >.</span><span class=\"token function\" >Map<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> map2 <span class=\"token operator\" >=</span> Immutable<span class=\"token punctuation\" >.</span><span class=\"token function\" >Map<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >assert<span class=\"token punctuation\" >(</span></span>map1 <span class=\"token operator\" >!</span><span class=\"token operator\" >==</span> map2<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >assert<span class=\"token punctuation\" >(</span></span>Object<span class=\"token punctuation\" >.</span><span class=\"token function\" >is<span class=\"token punctuation\" >(</span></span>map1<span class=\"token punctuation\" >,</span> map2<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >===</span> <span class=\"token keyword\" >false</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >assert<span class=\"token punctuation\" >(</span></span>Immutable<span class=\"token punctuation\" >.</span><span class=\"token function\" >is<span class=\"token punctuation\" >(</span></span>map1<span class=\"token punctuation\" >,</span> map2<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >===</span> <span class=\"token keyword\" >true</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code>"}}},"List":{"doc":{"synopsis":"<p>Lists are ordered indexed dense collections, much like a JavaScript\nArray.</p>\n","description":"<p>Lists are immutable and fully persistent with O(log32 N) gets and sets,\nand O(1) push and pop.</p>\n<p>Lists implement Deque, with efficient addition and removal from both the\nend (<code>push</code>, <code>pop</code>) and beginning (<code>unshift</code>, <code>shift</code>).</p>\n<p>Unlike a JavaScript Array, there is no distinction between an\n&quot;unset&quot; index and an index set to <code>undefined</code>. <code>List#forEach</code> visits all\nindices from 0 to size, regardless of if they where explicitly defined.</p>\n"},"module":{"isList":{"call":{"signatures":[{"params":[{"name":"maybeList","type":{"k":0}}],"type":{"k":1},"line":90}],"doc":{"synopsis":"<p>True if the provided value is a List</p>\n"}}},"of":{"call":{"signatures":[{"typeParams":["T"],"params":[{"name":"values","varArgs":true,"type":{"k":5,"type":{"k":7,"param":"T"}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":95}],"doc":{"synopsis":"<p>Creates a new List containing <code>values</code>.</p>\n"}}}},"call":{"signatures":[{"typeParams":["T"],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":101},{"typeParams":["T"],"params":[{"name":"iter","type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":107},{"typeParams":["T"],"params":[{"name":"iter","type":{"k":8,"name":"SetIterable","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":108},{"typeParams":["K","V"],"params":[{"name":"iter","type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"List","args":[{"k":0}]},"line":109},{"typeParams":["T"],"params":[{"name":"array","type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":110},{"typeParams":["T"],"params":[{"name":"iterator","type":{"k":8,"name":"Iterator","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":111},{"typeParams":["T"],"params":[{"name":"iterable","type":{"k":8,"name":"Object"}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":112}],"doc":{"synopsis":"<p>Create a new immutable List containing the values of the provided\niterable-like.</p>\n"}},"interface":{"line":113,"typeParams":["T"],"extends":[{"k":8,"name":"IndexedCollection","args":[{"k":7,"param":"T"}]}],"groups":[{"title":"Persistent changes","methods":{"#set":{"signatures":[{"params":[{"name":"index","type":{"k":2}},{"name":"value","type":{"k":7,"param":"T"}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":116}],"doc":{"synopsis":"<p>Returns a new List which includes <code>value</code> at <code>index</code>. If <code>index</code> already\nexists in this List, it will be replaced.</p>\n","description":"<p><code>index</code> may be a negative number, which indexes back from the end of the\nList. <code>v.set(-1, &quot;value&quot;)</code> sets the last item in the List.</p>\n<p>If <code>index</code> larger than <code>size</code>, the returned List&#39;s <code>size</code> will be large\nenough to include the <code>index</code>.</p>\n"}},"#delete":{"signatures":[{"params":[{"name":"index","type":{"k":2}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":130}],"doc":{"synopsis":"<p>Returns a new List which excludes this <code>index</code> and with a size 1 less\nthan this List. Values at indicies above <code>index</code> are shifted down by 1 to\nfill the position.</p>\n","notes":[{"name":"alias","body":"remove"}],"description":"<p>This is synonymous with <code>list.splice(index, 1)</code>.</p>\n<p><code>index</code> may be a negative number, which indexes back from the end of the\nList. <code>v.delete(-1)</code> deletes the last item in the List.</p>\n<p>Note: <code>delete</code> cannot be safely used in IE8</p>\n"}},"#clear":{"signatures":[{"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":146}],"doc":{"synopsis":"<p>Returns a new List with 0 size and no values.</p>\n"}},"#push":{"signatures":[{"params":[{"name":"values","varArgs":true,"type":{"k":5,"type":{"k":7,"param":"T"}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":151}],"doc":{"synopsis":"<p>Returns a new List with the provided <code>values</code> appended, starting at this\nList&#39;s <code>size</code>.</p>\n"}},"#pop":{"signatures":[{"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":157}],"doc":{"synopsis":"<p>Returns a new List with a size ones less than this List, excluding\nthe last index in this List.</p>\n","description":"<p>Note: this differs from <code>Array.prototype.pop</code> because it returns a new\nList rather than the removed value. Use <code>last()</code> to get the last value\nin this List.</p>\n"}},"#unshift":{"signatures":[{"params":[{"name":"values","varArgs":true,"type":{"k":5,"type":{"k":7,"param":"T"}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":167}],"doc":{"synopsis":"<p>Returns a new List with the provided <code>values</code> prepended, shifting other\nvalues ahead to higher indices.</p>\n"}},"#shift":{"signatures":[{"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":173}],"doc":{"synopsis":"<p>Returns a new List with a size ones less than this List, excluding\nthe first index in this List, shifting all other values to a lower index.</p>\n","description":"<p>Note: this differs from <code>Array.prototype.shift</code> because it returns a new\nList rather than the removed value. Use <code>first()</code> to get the first\nvalue in this List.</p>\n"}},"#update":{"signatures":[{"params":[{"name":"updater","type":{"k":6,"params":[{"name":"value","type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":183},{"params":[{"name":"index","type":{"k":2}},{"name":"updater","type":{"k":6,"params":[{"name":"value","type":{"k":7,"param":"T"}}],"type":{"k":7,"param":"T"}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":196},{"params":[{"name":"index","type":{"k":2}},{"name":"notSetValue","type":{"k":7,"param":"T"}},{"name":"updater","type":{"k":6,"params":[{"name":"value","type":{"k":7,"param":"T"}}],"type":{"k":7,"param":"T"}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":197}],"doc":{"synopsis":"<p>Returns a new List with an updated value at <code>index</code> with the return\nvalue of calling <code>updater</code> with the existing value, or <code>notSetValue</code> if\n<code>index</code> was not set. If called with a single argument, <code>updater</code> is\ncalled with the List itself.</p>\n","notes":[{"name":"see","body":"<p>Map.update</p>\n"}],"description":"<p><code>index</code> may be a negative number, which indexes back from the end of the\nList. <code>v.update(-1)</code> updates the last item in the List.</p>\n"}},"#merge":{"signatures":[{"params":[{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":198},{"params":[{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":203}],"doc":{"synopsis":"","notes":[{"name":"see","body":"<p><code>Map.prototype.merge</code></p>\n"}]}},"#mergeWith":{"signatures":[{"params":[{"name":"merger","type":{"k":6,"params":[{"name":"previous","optional":true,"type":{"k":7,"param":"T"}},{"name":"next","optional":true,"type":{"k":7,"param":"T"}}],"type":{"k":7,"param":"T"}}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":204},{"params":[{"name":"merger","type":{"k":6,"params":[{"name":"previous","optional":true,"type":{"k":7,"param":"T"}},{"name":"next","optional":true,"type":{"k":7,"param":"T"}}],"type":{"k":7,"param":"T"}}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":212}],"doc":{"synopsis":"","notes":[{"name":"see","body":"<p><code>Map.prototype.mergeWith</code></p>\n"}]}},"#mergeDeep":{"signatures":[{"params":[{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":216},{"params":[{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":221}],"doc":{"synopsis":"","notes":[{"name":"see","body":"<p><code>Map.prototype.mergeDeep</code></p>\n"}]}},"#mergeDeepWith":{"signatures":[{"params":[{"name":"merger","type":{"k":6,"params":[{"name":"previous","optional":true,"type":{"k":7,"param":"T"}},{"name":"next","optional":true,"type":{"k":7,"param":"T"}}],"type":{"k":7,"param":"T"}}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":222},{"params":[{"name":"merger","type":{"k":6,"params":[{"name":"previous","optional":true,"type":{"k":7,"param":"T"}},{"name":"next","optional":true,"type":{"k":7,"param":"T"}}],"type":{"k":7,"param":"T"}}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":230}],"doc":{"synopsis":"","notes":[{"name":"see","body":"<p><code>Map.prototype.mergeDeepWith</code></p>\n"}]}},"#setSize":{"signatures":[{"params":[{"name":"size","type":{"k":2}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":234}],"doc":{"synopsis":"<p>Returns a new List with size <code>size</code>. If <code>size</code> is less than this\nList&#39;s size, the new List will exclude values at the higher indices.\nIf <code>size</code> is greater than this List&#39;s size, the new List will have\nundefined values for the newly available indices.</p>\n","description":"<p>When building a new List and the final size is known up front, <code>setSize</code>\nused in conjunction with <code>withMutations</code> may result in the more\nperformant construction.</p>\n"}}}},{"title":"Deep persistent changes","methods":{"#setIn":{"signatures":[{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"value","type":{"k":7,"param":"T"}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":246},{"params":[{"name":"keyPath","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}},{"name":"value","type":{"k":7,"param":"T"}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":258}],"doc":{"synopsis":"<p>Returns a new List having set <code>value</code> at this <code>keyPath</code>. If any keys in\n<code>keyPath</code> do not exist, a new immutable Map will be created at that key.</p>\n","description":"<p>Index numbers are used as keys to determine the path to follow in\nthe List.</p>\n"}},"#removeIn":{"signatures":[{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":259},{"params":[{"name":"keyPath","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":266}],"doc":{"synopsis":"<p>Returns a new List having removed the value at this <code>keyPath</code>. If any\nkeys in <code>keyPath</code> do not exist, a new immutable Map will be created at\nthat key.</p>\n"}},"#updateIn":{"signatures":[{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"updater","type":{"k":6,"params":[{"name":"value","type":{"k":0}}],"type":{"k":0}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":267},{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"notSetValue","type":{"k":0}},{"name":"updater","type":{"k":6,"params":[{"name":"value","type":{"k":0}}],"type":{"k":0}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":275},{"params":[{"name":"keyPath","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}},{"name":"updater","type":{"k":6,"params":[{"name":"value","type":{"k":0}}],"type":{"k":0}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":280},{"params":[{"name":"keyPath","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}},{"name":"notSetValue","type":{"k":0}},{"name":"updater","type":{"k":6,"params":[{"name":"value","type":{"k":0}}],"type":{"k":0}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":284}],"doc":{"synopsis":"","notes":[{"name":"see","body":"<p><code>Map.prototype.updateIn</code></p>\n"}]}},"#mergeIn":{"signatures":[{"params":[{"name":"keyPath","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":289},{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":297},{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":301}],"doc":{"synopsis":"","notes":[{"name":"see","body":"<p><code>Map.prototype.mergeIn</code></p>\n"}]}},"#mergeDeepIn":{"signatures":[{"params":[{"name":"keyPath","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":305},{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":313},{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":317}],"doc":{"synopsis":"","notes":[{"name":"see","body":"<p><code>Map.prototype.mergeDeepIn</code></p>\n"}]}}}},{"title":"Transient changes","methods":{"#withMutations":{"signatures":[{"params":[{"name":"mutator","type":{"k":6,"params":[{"name":"mutable","type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]}}],"type":{"k":0}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":321}],"doc":{"synopsis":"","notes":[{"name":"see","body":"<p><code>Map.prototype.withMutations</code></p>\n"}]}},"#asMutable":{"signatures":[{"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":329}],"doc":{"synopsis":"","notes":[{"name":"see","body":"<p><code>Map.prototype.asMutable</code></p>\n"}]}},"#asImmutable":{"signatures":[{"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":334}],"doc":{"synopsis":"","notes":[{"name":"see","body":"<p><code>Map.prototype.asImmutable</code></p>\n"}]}}}}]}},"Map":{"doc":{"synopsis":"<p>Immutable Map is an unordered KeyedIterable of (key, value) pairs with\n<code>O(log32 N)</code> gets and <code>O(log32 N)</code> persistent sets.</p>\n","description":"<p>Iteration order of a Map is undefined, however is stable. Multiple\niterations of the same Map will iterate in the same order.</p>\n<p>Map&#39;s keys can be of any type, and use <code>Immutable.is</code> to determine key\nequality. This allows the use of any value (including NaN) as a key.</p>\n<p>Because <code>Immutable.is</code> returns equality based on value semantics, and\nImmutable collections are treated as values, any Immutable collection may\nbe used as a key.</p>\n<code class=\"codeBlock\"><span class=\"token function\" >Map<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >set<span class=\"token punctuation\" >(</span></span>List<span class=\"token punctuation\" >.</span><span class=\"token function\" >of<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'listofone'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >get<span class=\"token punctuation\" >(</span></span>List<span class=\"token punctuation\" >.</span><span class=\"token function\" >of<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// 'listofone'</span></code><p>Any JavaScript object may be used as a key, however strict identity is used\nto evaluate key equality. Two similar looking objects will represent two\ndifferent keys.</p>\n<p>Implemented by a hash-array mapped trie.</p>\n"},"module":{"isMap":{"call":{"signatures":[{"params":[{"name":"maybeMap","type":{"k":0}}],"type":{"k":1},"line":366}],"doc":{"synopsis":"<p>True if the provided value is a Map</p>\n"}}}},"call":{"signatures":[{"typeParams":["K","V"],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":372},{"typeParams":["K","V"],"params":[{"name":"iter","type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":384},{"typeParams":["K","V"],"params":[{"name":"iter","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":8,"name":"Array","args":[{"k":0}]}]}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":385},{"typeParams":["K","V"],"params":[{"name":"array","type":{"k":8,"name":"Array","args":[{"k":8,"name":"Array","args":[{"k":0}]}]}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":386},{"typeParams":["V"],"params":[{"name":"obj","type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":7,"param":"V"}}]}}],"type":{"k":8,"name":"Map","args":[{"k":3},{"k":7,"param":"V"}]},"line":387},{"typeParams":["K","V"],"params":[{"name":"iterator","type":{"k":8,"name":"Iterator","args":[{"k":8,"name":"Array","args":[{"k":0}]}]}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":388},{"typeParams":["K","V"],"params":[{"name":"iterable","type":{"k":8,"name":"Object"}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":389}],"doc":{"synopsis":"<p>Creates a new Immutable Map.</p>\n","description":"<p>Created with the same key value pairs as the provided KeyedIterable or\nJavaScript Object or expects an Iterable of [K, V] tuple entries.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> newMap <span class=\"token operator\" >=</span> <span class=\"token function\" >Map<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>key<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"value\"</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> newMap <span class=\"token operator\" >=</span> <span class=\"token function\" >Map<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >\"key\"</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >\"value\"</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code>"}},"interface":{"line":390,"typeParams":["K","V"],"extends":[{"k":8,"name":"KeyedCollection","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}],"groups":[{"title":"Persistent changes","methods":{"#set":{"signatures":[{"params":[{"name":"key","type":{"k":7,"param":"K"}},{"name":"value","type":{"k":7,"param":"V"}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":392}],"doc":{"synopsis":"<p>Returns a new Map also containing the new key, value pair. If an equivalent\nkey already exists in this Map, it will be replaced.</p>\n"}},"#delete":{"signatures":[{"params":[{"name":"key","type":{"k":7,"param":"K"}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":400}],"doc":{"synopsis":"<p>Returns a new Map which excludes this <code>key</code>.</p>\n","notes":[{"name":"alias","body":"remove"}],"description":"<p>Note: <code>delete</code> cannot be safely used in IE8, but is provided to mirror\nthe ES6 collection API.</p>\n"}},"#clear":{"signatures":[{"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":410}],"doc":{"synopsis":"<p>Returns a new Map containing no keys or values.</p>\n"}},"#update":{"signatures":[{"params":[{"name":"updater","type":{"k":6,"params":[{"name":"value","type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":415},{"params":[{"name":"key","type":{"k":7,"param":"K"}},{"name":"updater","type":{"k":6,"params":[{"name":"value","type":{"k":7,"param":"V"}}],"type":{"k":7,"param":"V"}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":425},{"params":[{"name":"key","type":{"k":7,"param":"K"}},{"name":"notSetValue","type":{"k":7,"param":"V"}},{"name":"updater","type":{"k":6,"params":[{"name":"value","type":{"k":7,"param":"V"}}],"type":{"k":7,"param":"V"}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":426}],"doc":{"synopsis":"<p>Returns a new Map having updated the value at this <code>key</code> with the return\nvalue of calling <code>updater</code> with the existing value, or <code>notSetValue</code> if\nthe key was not set. If called with only a single argument, <code>updater</code> is\ncalled with the Map itself.</p>\n","description":"<p>Equivalent to: <code>map.set(key, updater(map.get(key, notSetValue)))</code>.</p>\n"}},"#merge":{"signatures":[{"params":[{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":427},{"params":[{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":7,"param":"V"}}]}}}],"type":{"k":8,"name":"Map","args":[{"k":3},{"k":7,"param":"V"}]},"line":446}],"doc":{"synopsis":"<p>Returns a new Map resulting from merging the provided Iterables\n(or JS objects) into this Map. In other words, this takes each entry of\neach iterable and sets it on this Map.</p>\n","description":"<p>If any of the values provided to <code>merge</code> are not Iterable (would return\nfalse for <code>Immutable.isIterable</code>) then they are deeply converted via\n<code>Immutable.fromJS</code> before being merged. However, if the value is an\nIterable but contains non-iterable JS objects or arrays, those nested\nvalues will be preserved.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> x <span class=\"token operator\" >=</span> Immutable<span class=\"token punctuation\" >.</span><span class=\"token function\" >Map<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >20</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token number\" >30</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> y <span class=\"token operator\" >=</span> Immutable<span class=\"token punctuation\" >.</span><span class=\"token function\" >Map<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >40</span><span class=\"token punctuation\" >,</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >50</span><span class=\"token punctuation\" >,</span> d<span class=\"token punctuation\" >:</span> <span class=\"token number\" >60</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nx<span class=\"token punctuation\" >.</span><span class=\"token function\" >merge<span class=\"token punctuation\" >(</span></span>y<span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// { a: 50, b: 40, c: 30, d: 60 }\n</span>y<span class=\"token punctuation\" >.</span><span class=\"token function\" >merge<span class=\"token punctuation\" >(</span></span>x<span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// { b: 20, a: 10, d: 60, c: 30 }</span></code>"}},"#mergeWith":{"signatures":[{"params":[{"name":"merger","type":{"k":6,"params":[{"name":"previous","optional":true,"type":{"k":7,"param":"V"}},{"name":"next","optional":true,"type":{"k":7,"param":"V"}}],"type":{"k":7,"param":"V"}}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":447},{"params":[{"name":"merger","type":{"k":6,"params":[{"name":"previous","optional":true,"type":{"k":7,"param":"V"}},{"name":"next","optional":true,"type":{"k":7,"param":"V"}}],"type":{"k":7,"param":"V"}}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":7,"param":"V"}}]}}}],"type":{"k":8,"name":"Map","args":[{"k":3},{"k":7,"param":"V"}]},"line":463}],"doc":{"synopsis":"<p>Like <code>merge()</code>, <code>mergeWith()</code> returns a new Map resulting from merging\nthe provided Iterables (or JS objects) into this Map, but uses the\n<code>merger</code> function for dealing with conflicts.</p>\n","description":"<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> x <span class=\"token operator\" >=</span> Immutable<span class=\"token punctuation\" >.</span><span class=\"token function\" >Map<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >20</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token number\" >30</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> y <span class=\"token operator\" >=</span> Immutable<span class=\"token punctuation\" >.</span><span class=\"token function\" >Map<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >40</span><span class=\"token punctuation\" >,</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >50</span><span class=\"token punctuation\" >,</span> d<span class=\"token punctuation\" >:</span> <span class=\"token number\" >60</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nx<span class=\"token punctuation\" >.</span><span class=\"token function\" >mergeWith<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >(</span>prev<span class=\"token punctuation\" >,</span> next<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> prev <span class=\"token operator\" >/</span> next<span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// { a: 0.2, b: 0.5, c: 30, d: 60 }\n</span>y<span class=\"token punctuation\" >.</span><span class=\"token function\" >mergeWith<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >(</span>prev<span class=\"token punctuation\" >,</span> next<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> prev <span class=\"token operator\" >/</span> next<span class=\"token punctuation\" >,</span> x<span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// { b: 2, a: 5, d: 60, c: 30 }</span></code>"}},"#mergeDeep":{"signatures":[{"params":[{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":467},{"params":[{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":7,"param":"V"}}]}}}],"type":{"k":8,"name":"Map","args":[{"k":3},{"k":7,"param":"V"}]},"line":478}],"doc":{"synopsis":"<p>Like <code>merge()</code>, but when two Iterables conflict, it merges them as well,\nrecursing deeply through the nested data.</p>\n","description":"<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> x <span class=\"token operator\" >=</span> Immutable<span class=\"token punctuation\" >.</span><span class=\"token function\" >fromJS<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >10</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token number\" >20</span><span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >50</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> y <span class=\"token operator\" >=</span> Immutable<span class=\"token punctuation\" >.</span><span class=\"token function\" >fromJS<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >5</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> z<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nx<span class=\"token punctuation\" >.</span><span class=\"token function\" >mergeDeep<span class=\"token punctuation\" >(</span></span>y<span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// {a: { x: 2, y: 10 }, b: { x: 20, y: 5 }, c: { z: 3 } }</span></code>"}},"#mergeDeepWith":{"signatures":[{"params":[{"name":"merger","type":{"k":6,"params":[{"name":"previous","optional":true,"type":{"k":7,"param":"V"}},{"name":"next","optional":true,"type":{"k":7,"param":"V"}}],"type":{"k":7,"param":"V"}}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":479},{"params":[{"name":"merger","type":{"k":6,"params":[{"name":"previous","optional":true,"type":{"k":7,"param":"V"}},{"name":"next","optional":true,"type":{"k":7,"param":"V"}}],"type":{"k":7,"param":"V"}}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":7,"param":"V"}}]}}}],"type":{"k":8,"name":"Map","args":[{"k":3},{"k":7,"param":"V"}]},"line":494}],"doc":{"synopsis":"<p>Like <code>mergeDeep()</code>, but when two non-Iterables conflict, it uses the\n<code>merger</code> function to determine the resulting value.</p>\n","description":"<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> x <span class=\"token operator\" >=</span> Immutable<span class=\"token punctuation\" >.</span><span class=\"token function\" >fromJS<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >10</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token number\" >20</span><span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >50</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> y <span class=\"token operator\" >=</span> Immutable<span class=\"token punctuation\" >.</span><span class=\"token function\" >fromJS<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >5</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> z<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nx<span class=\"token punctuation\" >.</span><span class=\"token function\" >mergeDeepWith<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >(</span>prev<span class=\"token punctuation\" >,</span> next<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> prev <span class=\"token operator\" >/</span> next<span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// {a: { x: 5, y: 10 }, b: { x: 20, y: 10 }, c: { z: 3 } }</span></code>"}}}},{"title":"Deep persistent changes","methods":{"#setIn":{"signatures":[{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"value","type":{"k":7,"param":"V"}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":498},{"params":[{"name":"KeyPath","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}},{"name":"value","type":{"k":7,"param":"V"}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":507}],"doc":{"synopsis":"<p>Returns a new Map having set <code>value</code> at this <code>keyPath</code>. If any keys in\n<code>keyPath</code> do not exist, a new immutable Map will be created at that key.</p>\n"}},"#removeIn":{"signatures":[{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":508},{"params":[{"name":"keyPath","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":515}],"doc":{"synopsis":"<p>Returns a new Map having removed the value at this <code>keyPath</code>. If any keys\nin <code>keyPath</code> do not exist, a new immutable Map will be created at\nthat key.</p>\n"}},"#updateIn":{"signatures":[{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"updater","type":{"k":6,"params":[{"name":"value","type":{"k":0}}],"type":{"k":0}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":516},{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"notSetValue","type":{"k":0}},{"name":"updater","type":{"k":6,"params":[{"name":"value","type":{"k":0}}],"type":{"k":0}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":532},{"params":[{"name":"keyPath","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}},{"name":"updater","type":{"k":6,"params":[{"name":"value","type":{"k":0}}],"type":{"k":0}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":537},{"params":[{"name":"keyPath","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}},{"name":"notSetValue","type":{"k":0}},{"name":"updater","type":{"k":6,"params":[{"name":"value","type":{"k":0}}],"type":{"k":0}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":541}],"doc":{"synopsis":"<p>Returns a new Map having applied the <code>updater</code> to the entry found at the\nkeyPath. If any keys in <code>keyPath</code> do not exist, a new immutable Map will\nbe created at that key. If the <code>keyPath</code> was not previously set,\n<code>updater</code> is called with <code>notSetValue</code> (if provided).</p>\n","description":"<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> data <span class=\"token operator\" >=</span> Immutable<span class=\"token punctuation\" >.</span><span class=\"token function\" >fromJS<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> b<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> c<span class=\"token punctuation\" >:</span> <span class=\"token number\" >10</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\ndata<span class=\"token punctuation\" >.</span><span class=\"token function\" >updateIn<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> map <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> map<span class=\"token punctuation\" >.</span><span class=\"token function\" >set<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'d'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >20</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// { a: { b: { c: 10, d: 20 } } }</span></code>"}},"#mergeIn":{"signatures":[{"params":[{"name":"keyPath","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":546},{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":560},{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":7,"param":"V"}}]}}}],"type":{"k":8,"name":"Map","args":[{"k":3},{"k":7,"param":"V"}]},"line":564}],"doc":{"synopsis":"<p>A combination of <code>updateIn</code> and <code>merge</code>, returning a new Map, but\nperforming the merge at a point arrived at by following the keyPath.\nIn other words, these two lines are equivalent:</p>\n","description":"<code class=\"codeBlock\">x<span class=\"token punctuation\" >.</span><span class=\"token function\" >updateIn<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> abc <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> abc<span class=\"token punctuation\" >.</span><span class=\"token function\" >merge<span class=\"token punctuation\" >(</span></span>y<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nx<span class=\"token punctuation\" >.</span><span class=\"token function\" >mergeIn<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code>"}},"#mergeDeepIn":{"signatures":[{"params":[{"name":"keyPath","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":568},{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":582},{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":7,"param":"V"}}]}}}],"type":{"k":8,"name":"Map","args":[{"k":3},{"k":7,"param":"V"}]},"line":586}],"doc":{"synopsis":"<p>A combination of <code>updateIn</code> and <code>mergeDeep</code>, returning a new Map, but\nperforming the deep merge at a point arrived at by following the keyPath.\nIn other words, these two lines are equivalent:</p>\n","description":"<code class=\"codeBlock\">x<span class=\"token punctuation\" >.</span><span class=\"token function\" >updateIn<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> abc <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> abc<span class=\"token punctuation\" >.</span><span class=\"token function\" >mergeDeep<span class=\"token punctuation\" >(</span></span>y<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nx<span class=\"token punctuation\" >.</span><span class=\"token function\" >mergeDeepIn<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code>"}}}},{"title":"Transient updates","methods":{"#withMutations":{"signatures":[{"params":[{"name":"mutator","type":{"k":6,"params":[{"name":"mutable","type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":0}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":590}],"doc":{"synopsis":"<p>Every time you call one of the above functions, a new immutable Map is\ncreated. If a pure function calls a number of these to produce a final\nreturn value, then a penalty on performance and memory has been paid by\ncreating all of the intermediate immutable Maps.</p>\n","description":"<p>If you need to apply a series of mutations to produce a new immutable\nMap, <code>withMutations()</code> creates a temporary mutable copy of the Map which\ncan apply mutations in a highly performant manner. In fact, this is\nexactly how complex mutations like <code>merge</code> are done.</p>\n<p>As an example, this results in the creation of 2, not 4, new Maps:</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> map1 <span class=\"token operator\" >=</span> Immutable<span class=\"token punctuation\" >.</span><span class=\"token function\" >Map<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> map2 <span class=\"token operator\" >=</span> map1<span class=\"token punctuation\" >.</span><span class=\"token function\" >withMutations<span class=\"token punctuation\" >(</span></span>map <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token punctuation\" >{</span>\n  map<span class=\"token punctuation\" >.</span><span class=\"token function\" >set<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >set<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >set<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'c'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >assert<span class=\"token punctuation\" >(</span></span>map1<span class=\"token punctuation\" >.</span>size <span class=\"token operator\" >===</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >assert<span class=\"token punctuation\" >(</span></span>map2<span class=\"token punctuation\" >.</span>size <span class=\"token operator\" >===</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code>"}},"#asMutable":{"signatures":[{"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":616}],"doc":{"synopsis":"<p>Another way to avoid creation of intermediate Immutable maps is to create\na mutable copy of this collection. Mutable copies <em>always</em> return <code>this</code>,\nand thus shouldn&#39;t be used for equality. Your function should never return\na mutable copy of a collection, only use it internally to create a new\ncollection. If possible, use <code>withMutations</code> as it provides an easier to\nuse API.</p>\n","description":"<p>Note: if the collection is already mutable, <code>asMutable</code> returns itself.</p>\n"}},"#asImmutable":{"signatures":[{"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":628}],"doc":{"synopsis":"<p>The yin to <code>asMutable</code>&#39;s yang. Because it applies to mutable collections,\nthis operation is <em>mutable</em> and returns itself. Once performed, the mutable\ncopy has become immutable and can be safely returned from a function.</p>\n"}}}}]}},"OrderedMap":{"doc":{"synopsis":"<p>A type of Map that has the additional guarantee that the iteration order of\nentries will be the order in which they were set().</p>\n","description":"<p>The iteration behavior of OrderedMap is the same as native ES6 Map and\nJavaScript Object.</p>\n<p>Note that <code>OrderedMap</code> are more expensive than non-ordered <code>Map</code> and may\nconsume more memory. <code>OrderedMap#set</code> is amoratized O(log32 N), but not\nstable.</p>\n"},"module":{"isOrderedMap":{"call":{"signatures":[{"params":[{"name":"maybeOrderedMap","type":{"k":0}}],"type":{"k":1},"line":651}],"doc":{"synopsis":"<p>True if the provided value is an OrderedMap.</p>\n"}}}},"call":{"signatures":[{"typeParams":["K","V"],"type":{"k":8,"name":"OrderedMap","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":657},{"typeParams":["K","V"],"params":[{"name":"iter","type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"OrderedMap","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":672},{"typeParams":["K","V"],"params":[{"name":"iter","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":8,"name":"Array","args":[{"k":0}]}]}}],"type":{"k":8,"name":"OrderedMap","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":673},{"typeParams":["K","V"],"params":[{"name":"array","type":{"k":8,"name":"Array","args":[{"k":8,"name":"Array","args":[{"k":0}]}]}}],"type":{"k":8,"name":"OrderedMap","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":674},{"typeParams":["V"],"params":[{"name":"obj","type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":7,"param":"V"}}]}}],"type":{"k":8,"name":"OrderedMap","args":[{"k":3},{"k":7,"param":"V"}]},"line":675},{"typeParams":["K","V"],"params":[{"name":"iterator","type":{"k":8,"name":"Iterator","args":[{"k":8,"name":"Array","args":[{"k":0}]}]}}],"type":{"k":8,"name":"OrderedMap","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":676},{"typeParams":["K","V"],"params":[{"name":"iterable","type":{"k":8,"name":"Object"}}],"type":{"k":8,"name":"OrderedMap","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":677}],"doc":{"synopsis":"<p>Creates a new Immutable OrderedMap.</p>\n","description":"<p>Created with the same key value pairs as the provided KeyedIterable or\nJavaScript Object or expects an Iterable of [K, V] tuple entries.</p>\n<p>The iteration order of key-value pairs provided to this constructor will\nbe preserved in the OrderedMap.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> newOrderedMap <span class=\"token operator\" >=</span> <span class=\"token function\" >OrderedMap<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>key<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"value\"</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> newOrderedMap <span class=\"token operator\" >=</span> <span class=\"token function\" >OrderedMap<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >\"key\"</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >\"value\"</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code>"}},"interface":{"line":678,"typeParams":["K","V"],"extends":[{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}]}},"Set":{"doc":{"synopsis":"<p>A Collection of unique values with <code>O(log32 N)</code> adds and has.</p>\n","description":"<p>When iterating a Set, the entries will be (value, value) pairs. Iteration\norder of a Set is undefined, however is stable. Multiple iterations of the\nsame Set will iterate in the same order.</p>\n<p>Set values, like Map keys, may be of any type. Equality is determined using\n<code>Immutable.is</code>, enabling Sets to uniquely include other Immutable\ncollections, custom value types, and NaN.</p>\n"},"module":{"isSet":{"call":{"signatures":[{"params":[{"name":"maybeSet","type":{"k":0}}],"type":{"k":1},"line":694}],"doc":{"synopsis":"<p>True if the provided value is a Set</p>\n"}}},"of":{"call":{"signatures":[{"typeParams":["T"],"params":[{"name":"values","varArgs":true,"type":{"k":5,"type":{"k":7,"param":"T"}}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":699}],"doc":{"synopsis":"<p>Creates a new Set containing <code>values</code>.</p>\n"}}},"fromKeys":{"call":{"signatures":[{"typeParams":["T"],"params":[{"name":"iter","type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"T"},{"k":0}]}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":704},{"params":[{"name":"obj","type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":0}}]}}],"type":{"k":8,"name":"Set","args":[{"k":3}]},"line":710}],"doc":{"synopsis":"<p><code>Set.fromKeys()</code> creates a new immutable Set containing the keys from\nthis Iterable or JavaScript Object.</p>\n"}}}},"call":{"signatures":[{"typeParams":["T"],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":712},{"typeParams":["T"],"params":[{"name":"iter","type":{"k":8,"name":"SetIterable","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":718},{"typeParams":["T"],"params":[{"name":"iter","type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":719},{"typeParams":["K","V"],"params":[{"name":"iter","type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"Set","args":[{"k":0}]},"line":720},{"typeParams":["T"],"params":[{"name":"array","type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":721},{"typeParams":["T"],"params":[{"name":"iterator","type":{"k":8,"name":"Iterator","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":722},{"typeParams":["T"],"params":[{"name":"iterable","type":{"k":8,"name":"Object"}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":723}],"doc":{"synopsis":"<p>Create a new immutable Set containing the values of the provided\niterable-like.</p>\n"}},"interface":{"line":724,"typeParams":["T"],"extends":[{"k":8,"name":"SetCollection","args":[{"k":7,"param":"T"}]}],"groups":[{"title":"Persistent changes","methods":{"#add":{"signatures":[{"params":[{"name":"value","type":{"k":7,"param":"T"}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":726}],"doc":{"synopsis":"<p>Returns a new Set which also includes this value.</p>\n"}},"#delete":{"signatures":[{"params":[{"name":"value","type":{"k":7,"param":"T"}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":733}],"doc":{"synopsis":"<p>Returns a new Set which excludes this value.</p>\n","notes":[{"name":"alias","body":"remove"}],"description":"<p>Note: <code>delete</code> cannot be safely used in IE8</p>\n"}},"#clear":{"signatures":[{"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":742}],"doc":{"synopsis":"<p>Returns a new Set containing no values.</p>\n"}},"#union":{"signatures":[{"params":[{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":747},{"params":[{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":754}],"doc":{"synopsis":"<p>Returns a Set including any value from <code>iterables</code> that does not already\nexist in this Set.</p>\n","notes":[{"name":"alias","body":"merge"}]}},"#intersect":{"signatures":[{"params":[{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":757},{"params":[{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":764}],"doc":{"synopsis":"<p>Returns a Set which has removed any values not also contained\nwithin <code>iterables</code>.</p>\n"}},"#subtract":{"signatures":[{"params":[{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":765},{"params":[{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":770}],"doc":{"synopsis":"<p>Returns a Set excluding any values contained within <code>iterables</code>.</p>\n"}}}},{"title":"Transient changes","methods":{"#withMutations":{"signatures":[{"params":[{"name":"mutator","type":{"k":6,"params":[{"name":"mutable","type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]}}],"type":{"k":0}}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":771}],"doc":{"synopsis":"","notes":[{"name":"see","body":"<p><code>Map.prototype.withMutations</code></p>\n"}]}},"#asMutable":{"signatures":[{"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":779}],"doc":{"synopsis":"","notes":[{"name":"see","body":"<p><code>Map.prototype.asMutable</code></p>\n"}]}},"#asImmutable":{"signatures":[{"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":784}],"doc":{"synopsis":"","notes":[{"name":"see","body":"<p><code>Map.prototype.asImmutable</code></p>\n"}]}}}}]}},"OrderedSet":{"doc":{"synopsis":"<p>A type of Set that has the additional guarantee that the iteration order of\nvalues will be the order in which they were <code>add</code>ed.</p>\n","description":"<p>The iteration behavior of OrderedSet is the same as native ES6 Set.</p>\n<p>Note that <code>OrderedSet</code> are more expensive than non-ordered <code>Set</code> and may\nconsume more memory. <code>OrderedSet#add</code> is amoratized O(log32 N), but not\nstable.</p>\n"},"module":{"isOrderedSet":{"call":{"signatures":[{"params":[{"name":"maybeOrderedSet","type":{"k":0}}],"type":{"k":1},"line":803}],"doc":{"synopsis":"<p>True if the provided value is an OrderedSet.</p>\n"}}},"of":{"call":{"signatures":[{"typeParams":["T"],"params":[{"name":"values","varArgs":true,"type":{"k":5,"type":{"k":7,"param":"T"}}}],"type":{"k":8,"name":"OrderedSet","args":[{"k":7,"param":"T"}]},"line":808}],"doc":{"synopsis":"<p>Creates a new OrderedSet containing <code>values</code>.</p>\n"}}},"fromKeys":{"call":{"signatures":[{"typeParams":["T"],"params":[{"name":"iter","type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"T"},{"k":0}]}}],"type":{"k":8,"name":"OrderedSet","args":[{"k":7,"param":"T"}]},"line":813},{"params":[{"name":"obj","type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":0}}]}}],"type":{"k":8,"name":"OrderedSet","args":[{"k":3}]},"line":819}],"doc":{"synopsis":"<p><code>OrderedSet.fromKeys()</code> creates a new immutable OrderedSet containing\nthe keys from this Iterable or JavaScript Object.</p>\n"}}}},"call":{"signatures":[{"typeParams":["T"],"type":{"k":8,"name":"OrderedSet","args":[{"k":7,"param":"T"}]},"line":821},{"typeParams":["T"],"params":[{"name":"iter","type":{"k":8,"name":"SetIterable","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"OrderedSet","args":[{"k":7,"param":"T"}]},"line":827},{"typeParams":["T"],"params":[{"name":"iter","type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"OrderedSet","args":[{"k":7,"param":"T"}]},"line":828},{"typeParams":["K","V"],"params":[{"name":"iter","type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"OrderedSet","args":[{"k":0}]},"line":829},{"typeParams":["T"],"params":[{"name":"array","type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"OrderedSet","args":[{"k":7,"param":"T"}]},"line":830},{"typeParams":["T"],"params":[{"name":"iterator","type":{"k":8,"name":"Iterator","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"OrderedSet","args":[{"k":7,"param":"T"}]},"line":831},{"typeParams":["T"],"params":[{"name":"iterable","type":{"k":8,"name":"Object"}}],"type":{"k":8,"name":"OrderedSet","args":[{"k":7,"param":"T"}]},"line":832}],"doc":{"synopsis":"<p>Create a new immutable OrderedSet containing the values of the provided\niterable-like.</p>\n"}},"interface":{"line":833,"typeParams":["T"],"extends":[{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]}]}},"Stack":{"doc":{"synopsis":"<p>Stacks are indexed collections which support very efficient O(1) addition\nand removal from the front using <code>unshift(v)</code> and <code>shift()</code>.</p>\n","description":"<p>For familiarity, Stack also provides <code>push(v)</code>, <code>pop()</code>, and <code>peek()</code>, but\nbe aware that they also operate on the front of the list, unlike List or\na JavaScript Array.</p>\n<p>Note: <code>reverse()</code> or any inherent reverse traversal (<code>reduceRight</code>,\n<code>lastIndexOf</code>, etc.) is not efficient with a Stack.</p>\n<p>Stack is implemented with a Single-Linked List.</p>\n"},"module":{"isStack":{"call":{"signatures":[{"params":[{"name":"maybeStack","type":{"k":0}}],"type":{"k":1},"line":851}],"doc":{"synopsis":"<p>True if the provided value is a Stack</p>\n"}}},"of":{"call":{"signatures":[{"typeParams":["T"],"params":[{"name":"values","varArgs":true,"type":{"k":5,"type":{"k":7,"param":"T"}}}],"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":856}],"doc":{"synopsis":"<p>Creates a new Stack containing <code>values</code>.</p>\n"}}}},"call":{"signatures":[{"typeParams":["T"],"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":862},{"typeParams":["T"],"params":[{"name":"iter","type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":871},{"typeParams":["T"],"params":[{"name":"iter","type":{"k":8,"name":"SetIterable","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":872},{"typeParams":["K","V"],"params":[{"name":"iter","type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"Stack","args":[{"k":0}]},"line":873},{"typeParams":["T"],"params":[{"name":"array","type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":874},{"typeParams":["T"],"params":[{"name":"iterator","type":{"k":8,"name":"Iterator","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":875},{"typeParams":["T"],"params":[{"name":"iterable","type":{"k":8,"name":"Object"}}],"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":876}],"doc":{"synopsis":"<p>Create a new immutable Stack containing the values of the provided\niterable-like.</p>\n","description":"<p>The iteration order of the provided iterable is preserved in the\nresulting <code>Stack</code>.</p>\n"}},"interface":{"line":877,"typeParams":["T"],"extends":[{"k":8,"name":"IndexedCollection","args":[{"k":7,"param":"T"}]}],"groups":[{"title":"Reading values","methods":{"#peek":{"signatures":[{"type":{"k":7,"param":"T"},"line":879}],"doc":{"synopsis":"<p>Alias for <code>Stack.first()</code>.</p>\n"}}}},{"title":"Persistent changes","methods":{"#clear":{"signatures":[{"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":886}],"doc":{"synopsis":"<p>Returns a new Stack with 0 size and no values.</p>\n"}},"#unshift":{"signatures":[{"params":[{"name":"values","varArgs":true,"type":{"k":5,"type":{"k":7,"param":"T"}}}],"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":894}],"doc":{"synopsis":"<p>Returns a new Stack with the provided <code>values</code> prepended, shifting other\nvalues ahead to higher indices.</p>\n","description":"<p>This is very efficient for Stack.</p>\n"}},"#unshiftAll":{"signatures":[{"params":[{"name":"iter","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":902},{"params":[{"name":"iter","type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":907}],"doc":{"synopsis":"<p>Like <code>Stack#unshift</code>, but accepts a iterable rather than varargs.</p>\n"}},"#shift":{"signatures":[{"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":908}],"doc":{"synopsis":"<p>Returns a new Stack with a size ones less than this Stack, excluding\nthe first item in this Stack, shifting all other values to a lower index.</p>\n","description":"<p>Note: this differs from <code>Array.prototype.shift</code> because it returns a new\nStack rather than the removed value. Use <code>first()</code> or <code>peek()</code> to get the\nfirst value in this Stack.</p>\n"}},"#push":{"signatures":[{"params":[{"name":"values","varArgs":true,"type":{"k":5,"type":{"k":7,"param":"T"}}}],"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":918}],"doc":{"synopsis":"<p>Alias for <code>Stack#unshift</code> and is not equivalent to <code>List#push</code>.</p>\n"}},"#pushAll":{"signatures":[{"params":[{"name":"iter","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":923},{"params":[{"name":"iter","type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":928}],"doc":{"synopsis":"<p>Alias for <code>Stack#unshiftAll</code>.</p>\n"}},"#pop":{"signatures":[{"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":929}],"doc":{"synopsis":"<p>Alias for <code>Stack#shift</code> and is not equivalent to <code>List#pop</code>.</p>\n"}}}},{"title":"Transient changes","methods":{"#withMutations":{"signatures":[{"params":[{"name":"mutator","type":{"k":6,"params":[{"name":"mutable","type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]}}],"type":{"k":0}}}],"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":934}],"doc":{"synopsis":"","notes":[{"name":"see","body":"<p><code>Map.prototype.withMutations</code></p>\n"}]}},"#asMutable":{"signatures":[{"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":942}],"doc":{"synopsis":"","notes":[{"name":"see","body":"<p><code>Map.prototype.asMutable</code></p>\n"}]}},"#asImmutable":{"signatures":[{"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":947}],"doc":{"synopsis":"","notes":[{"name":"see","body":"<p><code>Map.prototype.asImmutable</code></p>\n"}]}}}}]}},"Range":{"call":{"signatures":[{"params":[{"name":"start","optional":true,"type":{"k":2}},{"name":"end","optional":true,"type":{"k":2}},{"name":"step","optional":true,"type":{"k":2}}],"type":{"k":8,"name":"IndexedSeq","args":[{"k":2}]},"line":953}],"doc":{"synopsis":"<p>Returns a IndexedSeq of numbers from <code>start</code> (inclusive) to <code>end</code>\n(exclusive), by <code>step</code>, where <code>start</code> defaults to 0, <code>step</code> to 1, and <code>end</code> to\ninfinity. When <code>start</code> is equal to <code>end</code>, returns empty range.</p>\n","description":"<code class=\"codeBlock\"><span class=\"token function\" >Range<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// [0,1,2,3,...]\n</span><span class=\"token function\" >Range<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >10</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// [10,11,12,13,...]\n</span><span class=\"token function\" >Range<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >15</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// [10,11,12,13,14]\n</span><span class=\"token function\" >Range<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >30</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >5</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// [10,15,20,25]\n</span><span class=\"token function\" >Range<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >30</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >5</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// [30,25,20,15]\n</span><span class=\"token function\" >Range<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >30</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >30</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >5</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// []</span></code>"}}},"Repeat":{"call":{"signatures":[{"typeParams":["T"],"params":[{"name":"value","type":{"k":7,"param":"T"}},{"name":"times","optional":true,"type":{"k":2}}],"type":{"k":8,"name":"IndexedSeq","args":[{"k":7,"param":"T"}]},"line":969}],"doc":{"synopsis":"<p>Returns a IndexedSeq of <code>value</code> repeated <code>times</code> times. When <code>times</code> is\nnot defined, returns an infinite sequence of <code>value</code>.</p>\n","description":"<code class=\"codeBlock\"><span class=\"token function\" >Repeat<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'foo'</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// ['foo','foo','foo',...]\n</span><span class=\"token function\" >Repeat<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'bar'</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >4</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// ['bar','bar','bar','bar']</span></code>"}}},"Record":{"doc":{"synopsis":"<p>Creates a new Class which produces Record instances. A record is similar to\na JS object, but enforce a specific set of allowed string keys, and have\ndefault values.</p>\n","description":"<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> ABRecord <span class=\"token operator\" >=</span> <span class=\"token function\" >Record<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >var</span> myRecord <span class=\"token operator\" >=</span> <span class=\"token keyword\" >new</span> <span class=\"token class-name\" >ABRecord</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span>b<span class=\"token punctuation\" >:</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span></code><p>Records always have a value for the keys they define. <code>remove</code>ing a key\nfrom a record simply resets it to the default value for that key.</p>\n<code class=\"codeBlock\">myRecord<span class=\"token punctuation\" >.</span>size <span class=\"token comment\" spellcheck=\"true\">// 2\n</span>myRecord<span class=\"token punctuation\" >.</span><span class=\"token function\" >get<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 1\n</span>myRecord<span class=\"token punctuation\" >.</span><span class=\"token function\" >get<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'b'</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 3\n</span>myRecordWithoutB <span class=\"token operator\" >=</span> myRecord<span class=\"token punctuation\" >.</span><span class=\"token function\" >remove<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'b'</span><span class=\"token punctuation\" >)</span>\nmyRecordWithoutB<span class=\"token punctuation\" >.</span><span class=\"token function\" >get<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'b'</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 2\n</span>myRecordWithoutB<span class=\"token punctuation\" >.</span>size <span class=\"token comment\" spellcheck=\"true\">// 2</span></code><p>Values provided to the constructor not found in the Record type will\nbe ignored:</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> myRecord <span class=\"token operator\" >=</span> <span class=\"token keyword\" >new</span> <span class=\"token class-name\" >ABRecord</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span>b<span class=\"token punctuation\" >:</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> x<span class=\"token punctuation\" >:</span><span class=\"token number\" >10</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\nmyRecord<span class=\"token punctuation\" >.</span><span class=\"token function\" >get<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'x'</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// undefined</span></code><p>Because Records have a known set of string keys, property get access works\nas expected, however property sets will throw an Error.</p>\n<p>Note: IE8 does not support property access. Only use <code>get()</code> when\nsupporting IE8.</p>\n<code class=\"codeBlock\">myRecord<span class=\"token punctuation\" >.</span>b <span class=\"token comment\" spellcheck=\"true\">// 3\n</span>myRecord<span class=\"token punctuation\" >.</span>b <span class=\"token operator\" >=</span> <span class=\"token number\" >5</span> <span class=\"token comment\" spellcheck=\"true\">// throws Error</span></code><p>Record Classes can be extended as well, allowing for custom methods on your\nRecord. This is not a common pattern in functional environments, but is in\nmany JS programs.</p>\n<p>Note: TypeScript does not support this type of subclassing.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >class</span> <span class=\"token class-name\" >ABRecord</span> <span class=\"token keyword\" >extends</span> <span class=\"token class-name\" >Record</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span>b<span class=\"token punctuation\" >:</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token function\" >getAB<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n    <span class=\"token keyword\" >return</span> <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span>a <span class=\"token operator\" >+</span> <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span>b<span class=\"token punctuation\" >;</span>\n  <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >}</span>\n\n<span class=\"token keyword\" >var</span> myRecord <span class=\"token operator\" >=</span> <span class=\"token keyword\" >new</span> <span class=\"token class-name\" >ABRecord</span><span class=\"token punctuation\" >(</span>b<span class=\"token punctuation\" >:</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span>\nmyRecord<span class=\"token punctuation\" >.</span><span class=\"token function\" >getAB<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 4</span></code>"},"module":{"Class":{"interface":{"line":1032}}},"call":{"signatures":[{"params":[{"name":"defaultValues","type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":0}}]}},{"name":"name","optional":true,"type":{"k":3}}],"type":{"k":8,"name":"Class","qualifier":["Record"]},"line":1038}]}},"Seq":{"doc":{"synopsis":"<p><strong>Sequences are immutable</strong> — Once a sequence is created, it cannot be\nchanged, appended to, rearranged or otherwise modified. Instead, any\nmutative method called on a sequence will return a new immutable sequence.</p>\n","description":"<p><strong>Sequences are lazy</strong> — Sequences do as little work as necessary to\nrespond to any method call.</p>\n<p>For example, the following does no work, because the resulting sequence is\nnever used:</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> oddSquares <span class=\"token operator\" >=</span> Immutable<span class=\"token punctuation\" >.</span>Seq<span class=\"token punctuation\" >.</span><span class=\"token function\" >of<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >4</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >5</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >6</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >7</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >8</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span><span class=\"token function\" >filter<span class=\"token punctuation\" >(</span></span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >map<span class=\"token punctuation\" >(</span></span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" >*</span> x<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code><p>Once the sequence is used, it performs only the work necessary. In this\nexample, no intermediate arrays are ever created, filter is only called\nthree times, and map is only called twice:</p>\n<code class=\"codeBlock\">console<span class=\"token punctuation\" >.</span><span class=\"token function\" >log<span class=\"token punctuation\" >(</span></span>evenSquares<span class=\"token punctuation\" >.</span><span class=\"token function\" >get<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// 9</span></code><p>Lazy Sequences allow for the efficient chaining of sequence operations,\nallowing for the expression of logic that can otherwise be very tedious:</p>\n<code class=\"codeBlock\">Immutable<span class=\"token punctuation\" >.</span><span class=\"token function\" >Seq<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span><span class=\"token function\" >flip<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >map<span class=\"token punctuation\" >(</span></span>key <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> key<span class=\"token punctuation\" >.</span><span class=\"token function\" >toUpperCase<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >flip<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >toObject<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map { A: 1, B: 1, C: 1 }</span></code><p>As well as expressing logic that would otherwise seem memory-limited:</p>\n<code class=\"codeBlock\">Immutable<span class=\"token punctuation\" >.</span><span class=\"token function\" >Range<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >Infinity</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span><span class=\"token function\" >skip<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >1000</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span><span class=\"token function\" >map<span class=\"token punctuation\" >(</span></span>n <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token operator\" >-</span>n<span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span><span class=\"token function\" >filter<span class=\"token punctuation\" >(</span></span>n <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> n <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span> <span class=\"token operator\" >===</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span><span class=\"token function\" >take<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span><span class=\"token function\" >reduce<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >(</span>r<span class=\"token punctuation\" >,</span> n<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> r <span class=\"token operator\" >*</span> n<span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// 1006008</span></code>"},"module":{"isSeq":{"call":{"signatures":[{"params":[{"name":"maybeSeq","type":{"k":0}}],"type":{"k":1},"line":1084}],"doc":{"synopsis":"<p>True if <code>maybeSeq</code> is a Seq, it is not backed by a concrete\nstructure such as Map, List, or Set.</p>\n"}}},"of":{"call":{"signatures":[{"typeParams":["T"],"params":[{"name":"values","varArgs":true,"type":{"k":5,"type":{"k":7,"param":"T"}}}],"type":{"k":8,"name":"IndexedSeq","args":[{"k":7,"param":"T"}]},"line":1089}],"doc":{"synopsis":"<p>Returns a Seq of the values provided. Alias for <code>IndexedSeq.of()</code>.</p>\n"}}}},"call":{"signatures":[{"typeParams":["K","V"],"type":{"k":8,"name":"Seq","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1095},{"typeParams":["K","V"],"params":[{"name":"seq","type":{"k":8,"name":"Seq","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"Seq","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1110},{"typeParams":["K","V"],"params":[{"name":"iterable","type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"Seq","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1111},{"typeParams":["T"],"params":[{"name":"array","type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"IndexedSeq","args":[{"k":7,"param":"T"}]},"line":1112},{"typeParams":["V"],"params":[{"name":"obj","type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":7,"param":"V"}}]}}],"type":{"k":8,"name":"KeyedSeq","args":[{"k":3},{"k":7,"param":"V"}]},"line":1113},{"typeParams":["T"],"params":[{"name":"iterator","type":{"k":8,"name":"Iterator","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"IndexedSeq","args":[{"k":7,"param":"T"}]},"line":1114},{"typeParams":["T"],"params":[{"name":"iterable","type":{"k":8,"name":"Object"}}],"type":{"k":8,"name":"IndexedSeq","args":[{"k":7,"param":"T"}]},"line":1115}],"doc":{"synopsis":"<p>Creates a Seq.</p>\n","description":"<p>Returns a particular kind of <code>Seq</code> based on the input.</p>\n<ul>\n<li>If a <code>Seq</code>, that same <code>Seq</code>.</li>\n<li>If an <code>Iterable</code>, a <code>Seq</code> of the same kind (Keyed, Indexed, or Set).</li>\n<li>If an Array-like, an <code>IndexedSeq</code>.</li>\n<li>If an Object with an Iterator, an <code>IndexedSeq</code>.</li>\n<li>If an Iterator, an <code>IndexedSeq</code>.</li>\n<li>If an Object, a <code>KeyedSeq</code>.</li>\n</ul>\n"}},"interface":{"line":1116,"typeParams":["K","V"],"extends":[{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}],"groups":[{"properties":{"#size":{"line":1118,"doc":{"synopsis":"<p>Some Seqs can describe their size lazily. When this is the case,\nsize will be an integer. Otherwise it will be undefined.</p>\n","description":"<p>For example, Seqs returned from map() or reverse()\npreserve the size of the original Seq while filter() does not.</p>\n<p>Note: Ranges, Repeats and Seqs made from Arrays and Objects will\nalways have a size.</p>\n"},"type":{"k":2}}}},{"title":"Force evaluation","methods":{"#cacheResult":{"signatures":[{"type":{"k":8,"name":"Seq","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1130}],"doc":{"synopsis":"<p>Because Sequences are lazy and designed to be chained together, they do\nnot cache their results. For example, this map function is called 6 times:</p>\n","description":"<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> squares <span class=\"token operator\" >=</span> Seq<span class=\"token punctuation\" >.</span><span class=\"token function\" >of<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >map<span class=\"token punctuation\" >(</span></span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" >*</span> x<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nsquares<span class=\"token punctuation\" >.</span><span class=\"token function\" >join<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span> <span class=\"token operator\" >+</span> squares<span class=\"token punctuation\" >.</span><span class=\"token function\" >join<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code><p>If you know a derived sequence will be used multiple times, it may be more\nefficient to first cache it. Here, map is called 3 times:</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> squares <span class=\"token operator\" >=</span> Seq<span class=\"token punctuation\" >.</span><span class=\"token function\" >of<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >map<span class=\"token punctuation\" >(</span></span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" >*</span> x<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >cacheResult<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nsquares<span class=\"token punctuation\" >.</span><span class=\"token function\" >join<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span> <span class=\"token operator\" >+</span> squares<span class=\"token punctuation\" >.</span><span class=\"token function\" >join<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code><p>Use this method judiciously, as it must fully evaluate a Seq.</p>\n<p>Note: after calling <code>cacheResult()</code>, a Seq will always have a size.</p>\n"}}}}]}},"KeyedSeq":{"module":{},"call":{"signatures":[{"typeParams":["K","V"],"type":{"k":8,"name":"KeyedSeq","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1156},{"typeParams":["K","V"],"params":[{"name":"seq","type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"KeyedSeq","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1162},{"typeParams":["K","V"],"params":[{"name":"seq","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}}],"type":{"k":8,"name":"KeyedSeq","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1163},{"typeParams":["K","V"],"params":[{"name":"array","type":{"k":8,"name":"Array","args":[{"k":0}]}}],"type":{"k":8,"name":"KeyedSeq","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1164},{"typeParams":["V"],"params":[{"name":"obj","type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":7,"param":"V"}}]}}],"type":{"k":8,"name":"KeyedSeq","args":[{"k":3},{"k":7,"param":"V"}]},"line":1165},{"typeParams":["K","V"],"params":[{"name":"iterator","type":{"k":8,"name":"Iterator","args":[{"k":0}]}}],"type":{"k":8,"name":"KeyedSeq","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1166},{"typeParams":["K","V"],"params":[{"name":"iterable","type":{"k":8,"name":"Object"}}],"type":{"k":8,"name":"KeyedSeq","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1167}],"doc":{"synopsis":"<p>Always returns a KeyedSeq, if input is not keyed, expects an\niterable of [K, V] tuples.</p>\n"}},"interface":{"line":1168,"typeParams":["K","V"],"extends":[{"k":8,"name":"Seq","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}],"groups":[{"methods":{"#toSeq":{"signatures":[{"type":{"k":8,"name":"KeyedSeq","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1170}],"doc":{"synopsis":"<p>Returns itself</p>\n"}}}}]}},"IndexedSeq":{"module":{"of":{"call":{"signatures":[{"typeParams":["T"],"params":[{"name":"values","varArgs":true,"type":{"k":5,"type":{"k":7,"param":"T"}}}],"type":{"k":8,"name":"IndexedSeq","args":[{"k":7,"param":"T"}]},"line":1179}],"doc":{"synopsis":"<p>Provides an IndexedSeq of the values provided.</p>\n"}}}},"call":{"signatures":[{"typeParams":["T"],"type":{"k":8,"name":"IndexedSeq","args":[{"k":7,"param":"T"}]},"line":1185},{"typeParams":["T"],"params":[{"name":"seq","type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"IndexedSeq","args":[{"k":7,"param":"T"}]},"line":1191},{"typeParams":["T"],"params":[{"name":"seq","type":{"k":8,"name":"SetIterable","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"IndexedSeq","args":[{"k":7,"param":"T"}]},"line":1192},{"typeParams":["K","V"],"params":[{"name":"seq","type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"IndexedSeq","args":[{"k":0}]},"line":1193},{"typeParams":["T"],"params":[{"name":"array","type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"IndexedSeq","args":[{"k":7,"param":"T"}]},"line":1194},{"typeParams":["T"],"params":[{"name":"iterator","type":{"k":8,"name":"Iterator","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"IndexedSeq","args":[{"k":7,"param":"T"}]},"line":1195},{"typeParams":["T"],"params":[{"name":"iterable","type":{"k":8,"name":"Object"}}],"type":{"k":8,"name":"IndexedSeq","args":[{"k":7,"param":"T"}]},"line":1196}],"doc":{"synopsis":"<p>Always returns IndexedSeq, discarding associated keys and\nsupplying incrementing indices.</p>\n"}},"interface":{"line":1197,"typeParams":["T"],"extends":[{"k":8,"name":"Seq","args":[{"k":2},{"k":7,"param":"T"}]},{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]}],"groups":[{"methods":{"#toSeq":{"signatures":[{"type":{"k":8,"name":"IndexedSeq","args":[{"k":7,"param":"T"}]},"line":1199}],"doc":{"synopsis":"<p>Returns itself</p>\n"}}}}]}},"SetSeq":{"module":{"of":{"call":{"signatures":[{"typeParams":["T"],"params":[{"name":"values","varArgs":true,"type":{"k":5,"type":{"k":7,"param":"T"}}}],"type":{"k":8,"name":"SetSeq","args":[{"k":7,"param":"T"}]},"line":1207}],"doc":{"synopsis":"<p>Returns a SetSeq of the provided values</p>\n"}}}},"call":{"signatures":[{"typeParams":["T"],"type":{"k":8,"name":"SetSeq","args":[{"k":7,"param":"T"}]},"line":1213},{"typeParams":["T"],"params":[{"name":"seq","type":{"k":8,"name":"SetIterable","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"SetSeq","args":[{"k":7,"param":"T"}]},"line":1218},{"typeParams":["T"],"params":[{"name":"seq","type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"SetSeq","args":[{"k":7,"param":"T"}]},"line":1219},{"typeParams":["K","V"],"params":[{"name":"seq","type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"SetSeq","args":[{"k":0}]},"line":1220},{"typeParams":["T"],"params":[{"name":"array","type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"SetSeq","args":[{"k":7,"param":"T"}]},"line":1221},{"typeParams":["T"],"params":[{"name":"iterator","type":{"k":8,"name":"Iterator","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"SetSeq","args":[{"k":7,"param":"T"}]},"line":1222},{"typeParams":["T"],"params":[{"name":"iterable","type":{"k":8,"name":"Object"}}],"type":{"k":8,"name":"SetSeq","args":[{"k":7,"param":"T"}]},"line":1223}],"doc":{"synopsis":"<p>Always returns a SetSeq, discarding associated indices or keys.</p>\n"}},"interface":{"line":1224,"typeParams":["T"],"extends":[{"k":8,"name":"Seq","args":[{"k":7,"param":"T"},{"k":7,"param":"T"}]},{"k":8,"name":"SetIterable","args":[{"k":7,"param":"T"}]}],"groups":[{"methods":{"#toSeq":{"signatures":[{"type":{"k":8,"name":"SetSeq","args":[{"k":7,"param":"T"}]},"line":1226}],"doc":{"synopsis":"<p>Returns itself</p>\n"}}}}]}},"Iterable":{"doc":{"synopsis":"<p>The <code>Iterable</code> is a set of (key, value) entries which can be iterated, and\nis the base class for all collections in <code>immutable</code>, allowing them to\nmake use of all the Iterable methods (such as <code>map</code> and <code>filter</code>).</p>\n","description":"<p>Note: An iterable is always iterated in the same order, however that order\nmay not always be well defined, as is the case for the <code>Map</code> and <code>Set</code>.</p>\n"},"module":{"isIterable":{"call":{"signatures":[{"params":[{"name":"maybeIterable","type":{"k":0}}],"type":{"k":1},"line":1243}],"doc":{"synopsis":"<p>True if <code>maybeIterable</code> is an Iterable, or any of its subclasses.</p>\n"}}},"isKeyed":{"call":{"signatures":[{"params":[{"name":"maybeKeyed","type":{"k":0}}],"type":{"k":1},"line":1247}],"doc":{"synopsis":"<p>True if <code>maybeKeyed</code> is a KeyedIterable, or any of its subclasses.</p>\n"}}},"isIndexed":{"call":{"signatures":[{"params":[{"name":"maybeIndexed","type":{"k":0}}],"type":{"k":1},"line":1252}],"doc":{"synopsis":"<p>True if <code>maybeIndexed</code> is a IndexedIterable, or any of its subclasses.</p>\n"}}},"isAssociative":{"call":{"signatures":[{"params":[{"name":"maybeAssociative","type":{"k":0}}],"type":{"k":1},"line":1257}],"doc":{"synopsis":"<p>True if <code>maybeAssociative</code> is either a keyed or indexed Iterable.</p>\n"}}},"isOrdered":{"call":{"signatures":[{"params":[{"name":"maybeOrdered","type":{"k":0}}],"type":{"k":1},"line":1262}],"doc":{"synopsis":"<p>True if <code>maybeOrdered</code> is an Iterable where iteration order is well\ndefined. True for IndexedIterable as well as OrderedMap and OrderedSet.</p>\n"}}}},"call":{"signatures":[{"typeParams":["K","V"],"params":[{"name":"iterable","type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1269},{"typeParams":["T"],"params":[{"name":"array","type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]},"line":1286},{"typeParams":["V"],"params":[{"name":"obj","type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":7,"param":"V"}}]}}],"type":{"k":8,"name":"KeyedIterable","args":[{"k":3},{"k":7,"param":"V"}]},"line":1287},{"typeParams":["T"],"params":[{"name":"iterator","type":{"k":8,"name":"Iterator","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]},"line":1288},{"typeParams":["T"],"params":[{"name":"iterable","type":{"k":8,"name":"Object"}}],"type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]},"line":1289},{"typeParams":["V"],"params":[{"name":"value","type":{"k":7,"param":"V"}}],"type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"V"}]},"line":1290}],"doc":{"synopsis":"<p>Creates an Iterable.</p>\n","description":"<p>The type of Iterable created is based on the input.</p>\n<ul>\n<li>If an <code>Iterable</code>, that same <code>Iterable</code>.</li>\n<li>If an Array-like, an <code>IndexedIterable</code>.</li>\n<li>If an Object with an Iterator, an <code>IndexedIterable</code>.</li>\n<li>If an Iterator, an <code>IndexedIterable</code>.</li>\n<li>If an Object, a <code>KeyedIterable</code>.</li>\n</ul>\n<p>This methods forces the conversion of Objects and Strings to Iterables.\nIf you want to ensure that a Iterable of one item is returned, use\n<code>Seq.of</code>.</p>\n"}},"interface":{"line":1291,"typeParams":["K","V"],"groups":[{"title":"Value equality","methods":{"#equals":{"signatures":[{"params":[{"name":"other","type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":1},"line":1293}],"doc":{"synopsis":"<p>True if this and the other Iterable have value equality, as defined\nby <code>Immutable.is()</code>.</p>\n","description":"<p>Note: This is equivalent to <code>Immutable.is(this, other)</code>, but provided to\nallow for chained expressions.</p>\n"}}}},{"title":"Reading values","methods":{"#get":{"signatures":[{"params":[{"name":"key","type":{"k":7,"param":"K"}},{"name":"notSetValue","optional":true,"type":{"k":7,"param":"V"}}],"type":{"k":7,"param":"V"},"line":1304}],"doc":{"synopsis":"<p>Returns the value associated with the provided key, or notSetValue if\nthe Iterable does not contain this key.</p>\n","description":"<p>Note: it is possible a key may be associated with an <code>undefined</code> value, so\nif <code>notSetValue</code> is not provided and this method returns <code>undefined</code>,\nthat does not guarantee the key was not found.</p>\n"}},"#has":{"signatures":[{"params":[{"name":"key","type":{"k":7,"param":"K"}}],"type":{"k":1},"line":1317}],"doc":{"synopsis":"<p>True if a key exists within this <code>Iterable</code>.</p>\n"}},"#contains":{"signatures":[{"params":[{"name":"value","type":{"k":7,"param":"V"}}],"type":{"k":1},"line":1322}],"doc":{"synopsis":"<p>True if a value exists within this <code>Iterable</code>.</p>\n"}},"#first":{"signatures":[{"type":{"k":7,"param":"V"},"line":1327}],"doc":{"synopsis":"<p>The first value in the Iterable.</p>\n"}},"#last":{"signatures":[{"type":{"k":7,"param":"V"},"line":1332}],"doc":{"synopsis":"<p>The last value in the Iterable.</p>\n"}}}},{"title":"Reading deep values","methods":{"#getIn":{"signatures":[{"params":[{"name":"searchKeyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"notSetValue","optional":true,"type":{"k":0}}],"type":{"k":0},"line":1337},{"params":[{"name":"searchKeyPath","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}},{"name":"notSetValue","optional":true,"type":{"k":0}}],"type":{"k":0},"line":1346}],"doc":{"synopsis":"<p>Returns the value found by following a path of keys or indices through\nnested Iterables.</p>\n"}}}},{"title":"Conversion to JavaScript types","methods":{"#toJS":{"signatures":[{"type":{"k":0},"line":1347}],"doc":{"synopsis":"<p>Deeply converts this Iterable to equivalent JS.</p>\n","description":"<p><code>IndexedIterables</code>, and <code>SetIterables</code> become Arrays, while\n<code>KeyedIterables</code> become Objects.</p>\n"}},"#toArray":{"signatures":[{"type":{"k":8,"name":"Array","args":[{"k":7,"param":"V"}]},"line":1358}],"doc":{"synopsis":"<p>Shallowly converts this iterable to an Array, discarding keys.</p>\n"}},"#toObject":{"signatures":[{"type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":7,"param":"V"}}]},"line":1363}],"doc":{"synopsis":"<p>Shallowly converts this Iterable to an Object.</p>\n","description":"<p>Throws if keys are not strings.</p>\n"}}}},{"title":"Conversion to Collections","methods":{"#toMap":{"signatures":[{"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1370}],"doc":{"synopsis":"<p>Converts this Iterable to a Map, Throws if keys are not hashable.</p>\n","description":"<p>Note: This is equivalent to <code>Map(this.toKeyedSeq())</code>, but provided\nfor convenience and to allow for chained expressions.</p>\n"}},"#toOrderedMap":{"signatures":[{"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1381}],"doc":{"synopsis":"<p>Converts this Iterable to a Map, maintaining the order of iteration.</p>\n","description":"<p>Note: This is equivalent to <code>OrderedMap(this.toKeyedSeq())</code>, but\nprovided for convenience and to allow for chained expressions.</p>\n"}},"#toSet":{"signatures":[{"type":{"k":8,"name":"Set","args":[{"k":7,"param":"V"}]},"line":1389}],"doc":{"synopsis":"<p>Converts this Iterable to a Set, discarding keys. Throws if values\nare not hashable.</p>\n","description":"<p>Note: This is equivalent to <code>Set(this)</code>, but provided to allow for\nchained expressions.</p>\n"}},"#toOrderedSet":{"signatures":[{"type":{"k":8,"name":"Set","args":[{"k":7,"param":"V"}]},"line":1398}],"doc":{"synopsis":"<p>Converts this Iterable to a Set, maintaining the order of iteration and\ndiscarding keys.</p>\n","description":"<p>Note: This is equivalent to <code>OrderedSet(this.valueSeq())</code>, but provided\nfor convenience and to allow for chained expressions.</p>\n"}},"#toList":{"signatures":[{"type":{"k":8,"name":"List","args":[{"k":7,"param":"V"}]},"line":1407}],"doc":{"synopsis":"<p>Converts this Iterable to a List, discarding keys.</p>\n","description":"<p>Note: This is equivalent to <code>List(this)</code>, but provided to allow\nfor chained expressions.</p>\n"}},"#toStack":{"signatures":[{"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"V"}]},"line":1415}],"doc":{"synopsis":"<p>Converts this Iterable to a Stack, discarding keys. Throws if values\nare not hashable.</p>\n","description":"<p>Note: This is equivalent to <code>Stack(this)</code>, but provided to allow for\nchained expressions.</p>\n"}}}},{"title":"Conversion to lazy Seq","methods":{"#toSeq":{"signatures":[{"type":{"k":8,"name":"Seq","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1424}],"doc":{"synopsis":"<p>Converts this Iterable to a Seq of the same kind (indexed,\nkeyed, or set).</p>\n"}},"#toKeyedSeq":{"signatures":[{"type":{"k":8,"name":"KeyedSeq","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1433}],"doc":{"synopsis":"<p>Returns a KeyedSeq from this Iterable where indices are treated as keys.</p>\n","description":"<p>This is useful if you want to operate on an\nIndexedIterable and preserve the [index, value] pairs.</p>\n<p>The returned Seq will have identical iteration order as\nthis Iterable.</p>\n<p>Example:</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> indexedSeq <span class=\"token operator\" >=</span> Immutable<span class=\"token punctuation\" >.</span>Seq<span class=\"token punctuation\" >.</span><span class=\"token function\" >of<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'A'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'C'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nindexedSeq<span class=\"token punctuation\" >.</span><span class=\"token function\" >filter<span class=\"token punctuation\" >(</span></span>v <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> v <span class=\"token operator\" >===</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >toString<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// Seq [ 'B' ]\n</span><span class=\"token keyword\" >var</span> keyedSeq <span class=\"token operator\" >=</span> indexedSeq<span class=\"token punctuation\" >.</span><span class=\"token function\" >toKeyedSeq<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nkeyedSeq<span class=\"token punctuation\" >.</span><span class=\"token function\" >filter<span class=\"token punctuation\" >(</span></span>v <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> v <span class=\"token operator\" >===</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >toString<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// Seq { 1: 'B' }</span></code>"}},"#toIndexedSeq":{"signatures":[{"type":{"k":8,"name":"IndexedSeq","args":[{"k":7,"param":"V"}]},"line":1452}],"doc":{"synopsis":"<p>Returns an IndexedSeq of the values of this Iterable, discarding keys.</p>\n"}},"#toSetSeq":{"signatures":[{"type":{"k":8,"name":"SetSeq","args":[{"k":7,"param":"V"}]},"line":1457}],"doc":{"synopsis":"<p>Returns a SetSeq of the values of this Iterable, discarding keys.</p>\n"}}}},{"title":"Iterators","methods":{"#keys":{"signatures":[{"type":{"k":8,"name":"Iterator","args":[{"k":7,"param":"K"}]},"line":1462}],"doc":{"synopsis":"<p>An iterator of this <code>Iterable</code>&#39;s keys.</p>\n"}},"#values":{"signatures":[{"type":{"k":8,"name":"Iterator","args":[{"k":7,"param":"V"}]},"line":1470}],"doc":{"synopsis":"<p>An iterator of this <code>Iterable</code>&#39;s values.</p>\n"}},"#entries":{"signatures":[{"type":{"k":8,"name":"Iterator","args":[{"k":8,"name":"Array","args":[{"k":0}]}]},"line":1475}],"doc":{"synopsis":"<p>An iterator of this <code>Iterable</code>&#39;s entries as <code>[key, value]</code> tuples.</p>\n"}}}},{"title":"Iterables (lazy Seq)","methods":{"#keySeq":{"signatures":[{"type":{"k":8,"name":"IndexedSeq","args":[{"k":7,"param":"K"}]},"line":1480}],"doc":{"synopsis":"<p>Returns a new IndexedSeq of the keys of this Iterable,\ndiscarding values.</p>\n"}},"#valueSeq":{"signatures":[{"type":{"k":8,"name":"IndexedSeq","args":[{"k":7,"param":"V"}]},"line":1489}],"doc":{"synopsis":"<p>Returns an IndexedSeq of the values of this Iterable, discarding keys.</p>\n"}},"#entrySeq":{"signatures":[{"type":{"k":8,"name":"IndexedSeq","args":[{"k":8,"name":"Array","args":[{"k":0}]}]},"line":1494}],"doc":{"synopsis":"<p>Returns a new IndexedSeq of [key, value] tuples.</p>\n"}}}},{"title":"Higher-order Collection methods (ES6)","methods":{"#concat":{"signatures":[{"params":[{"name":"valuesOrIterables","varArgs":true,"type":{"k":5,"type":{"k":0}}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1499}],"doc":{"synopsis":"<p>Returns a new Iterable of the same type with other values and\niterable-like concatenated to this one.</p>\n","description":"<p>For Seqs, all entries will be present in\nthe resulting iterable, even if they have the same key.</p>\n"}},"#every":{"signatures":[{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":1},"line":1511}],"doc":{"synopsis":"<p>True if <code>predicate</code> returns true for all entries in the Iterable.</p>\n"}},"#filter":{"signatures":[{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1519}],"doc":{"synopsis":"<p>Returns a new Iterable of the same type with only the entries for which\nthe <code>predicate</code> function returns true.</p>\n","description":"<code class=\"codeBlock\"><span class=\"token function\" >Seq<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span>b<span class=\"token punctuation\" >:</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span>c<span class=\"token punctuation\" >:</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span>d<span class=\"token punctuation\" >:</span><span class=\"token number\" >4</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >filter<span class=\"token punctuation\" >(</span></span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span> <span class=\"token operator\" >===</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { b: 2, d: 4 }</span></code>"}},"#find":{"signatures":[{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}},{"name":"notSetValue","optional":true,"type":{"k":7,"param":"V"}}],"type":{"k":7,"param":"V"},"line":1532}],"doc":{"synopsis":"<p>Returns the value for which the <code>predicate</code> returns true.</p>\n"}},"#forEach":{"signatures":[{"params":[{"name":"sideEffect","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":0}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":2},"line":1541}],"doc":{"synopsis":"<p>The <code>sideEffect</code> is executed for every entry in the Iterable.</p>\n","description":"<p>Unlike <code>Array.prototype.forEach</code>, if any call of <code>sideEffect</code> returns\n<code>false</code>, the iteration will stop. Returns the number of entries iterated\n(including the last iteration which returned false).</p>\n"}},"#join":{"signatures":[{"params":[{"name":"separator","optional":true,"type":{"k":3}}],"type":{"k":3},"line":1553}],"doc":{"synopsis":"<p>Joins values together as a string, inserting a separator between each.\nThe default separator is &quot;,&quot;.</p>\n"}},"#map":{"signatures":[{"typeParams":["M"],"params":[{"name":"mapper","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":7,"param":"M"}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"M"}]},"line":1559}],"doc":{"synopsis":"<p>Returns a new Iterable of the same type with values passed through a\n<code>mapper</code> function.</p>\n","description":"<code class=\"codeBlock\"><span class=\"token function\" >Seq<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >map<span class=\"token punctuation\" >(</span></span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token number\" >10</span> <span class=\"token operator\" >*</span> x<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { a: 10, b: 20 }</span></code>"}},"#reduce":{"signatures":[{"typeParams":["R"],"params":[{"name":"reducer","type":{"k":6,"params":[{"name":"reduction","optional":true,"type":{"k":7,"param":"R"}},{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":7,"param":"R"}}},{"name":"initialReduction","optional":true,"type":{"k":7,"param":"R"}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":7,"param":"R"},"line":1572}],"doc":{"synopsis":"<p>Reduces the Iterable to a value by calling the <code>reducer</code> for every entry\nin the Iterable and passing along the reduced value.</p>\n","notes":[{"name":"see","body":"<p><code>Array.prototype.reduce</code>.</p>\n"}],"description":"<p>If <code>initialReduction</code> is not provided, or is null, the first item in the\nIterable will be used.</p>\n"}},"#reduceRight":{"signatures":[{"typeParams":["R"],"params":[{"name":"reducer","type":{"k":6,"params":[{"name":"reduction","optional":true,"type":{"k":7,"param":"R"}},{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":7,"param":"R"}}},{"name":"initialReduction","optional":true,"type":{"k":7,"param":"R"}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":7,"param":"R"},"line":1587}],"doc":{"synopsis":"<p>Reduces the Iterable in reverse (from the right side).</p>\n","description":"<p>Note: Similar to this.reverse().reduce(), and provided for parity\nwith <code>Array#reduceRight</code>.</p>\n"}},"#reverse":{"signatures":[{"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1599}],"doc":{"synopsis":"<p>Returns a new Iterable of the same type in reverse order.</p>\n"}},"#slice":{"signatures":[{"params":[{"name":"begin","optional":true,"type":{"k":2}},{"name":"end","optional":true,"type":{"k":2}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1604}],"doc":{"synopsis":"<p>Returns a new Iterable of the same type representing a portion of this\nIterable from start up to but not including end.</p>\n","description":"<p>If begin is negative, it is offset from the end of the Iterable. e.g.\n<code>slice(-2)</code> returns a Iterable of the last two entries. If it is not\nprovided the new Iterable will begin at the beginning of this Iterable.</p>\n<p>If end is negative, it is offset from the end of the Iterable. e.g.\n<code>slice(0, -1)</code> returns an Iterable of everything but the last entry. If\nit is not provided, the new Iterable will continue through the end of\nthis Iterable.</p>\n<p>If the requested slice is equivalent to the current Iterable, then it\nwill return itself.</p>\n"}},"#some":{"signatures":[{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":1},"line":1622}],"doc":{"synopsis":"<p>True if <code>predicate</code> returns true for any entry in the Iterable.</p>\n"}},"#sort":{"signatures":[{"params":[{"name":"comparator","optional":true,"type":{"k":6,"params":[{"name":"valueA","type":{"k":7,"param":"V"}},{"name":"valueB","type":{"k":7,"param":"V"}}],"type":{"k":2}}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1630}],"doc":{"synopsis":"<p>Returns a new Iterable of the same type which contains the same entries,\nstably sorted by using a <code>comparator</code>.</p>\n","description":"<p>If a <code>comparator</code> is not provided, a default comparator uses <code>&lt;</code> and <code>&gt;</code>.</p>\n<p><code>comparator(valueA, valueB)</code>:</p>\n<ul>\n<li>Returns <code>0</code> if the elements should not be swapped.</li>\n<li>Returns <code>-1</code> (or any negative number) if <code>valueA</code> comes before <code>valueB</code></li>\n<li>Returns <code>1</code> (or any positive number) if <code>valueA</code> comes after <code>valueB</code></li>\n<li>Is pure, i.e. it must always return the same value for the same pair\nof values.</li>\n</ul>\n<p>When sorting collections which have no defined order, their ordered\nequivalents will be returned. e.g. <code>map.sort()</code> returns OrderedMap.</p>\n"}}}},{"title":"Higher-order collection methods","methods":{"#butLast":{"signatures":[{"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1649}],"doc":{"synopsis":"<p>Returns a new Iterable of the same type containing all entries except\nthe last.</p>\n"}},"#count":{"signatures":[{"type":{"k":2},"line":1658},{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":2},"line":1670}],"doc":{"synopsis":"<p>Returns the size of this Iterable.</p>\n","description":"<p>Regardless of if this Iterable can describe its size lazily (some Seqs\ncannot), this method will always return the correct size. E.g. it\nevaluates a lazy <code>Seq</code> if necessary.</p>\n<p>If <code>predicate</code> is provided, then this returns the count of entries in the\nIterable for which the <code>predicate</code> returns true.</p>\n"}},"#countBy":{"signatures":[{"typeParams":["G"],"params":[{"name":"grouper","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":7,"param":"G"}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"G"},{"k":2}]},"line":1674}],"doc":{"synopsis":"<p>Returns a <code>KeyedSeq</code> of counts, grouped by the return value of\nthe <code>grouper</code> function.</p>\n","description":"<p>Note: This is not a lazy operation.</p>\n"}},"#filterNot":{"signatures":[{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1685}],"doc":{"synopsis":"<p>Returns a new Iterable of the same type with only the entries for which\nthe <code>predicate</code> function returns false.</p>\n","description":"<code class=\"codeBlock\"><span class=\"token function\" >Seq<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span>b<span class=\"token punctuation\" >:</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span>c<span class=\"token punctuation\" >:</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span>d<span class=\"token punctuation\" >:</span><span class=\"token number\" >4</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >filterNot<span class=\"token punctuation\" >(</span></span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span> <span class=\"token operator\" >===</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { a: 1, c: 3 }</span></code>"}},"#findLast":{"signatures":[{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}},{"name":"notSetValue","optional":true,"type":{"k":7,"param":"V"}}],"type":{"k":7,"param":"V"},"line":1698}],"doc":{"synopsis":"<p>Returns the last value for which the <code>predicate</code> returns true.</p>\n","description":"<p>Note: <code>predicate</code> will be called for each entry in reverse.</p>\n"}},"#flatMap":{"signatures":[{"typeParams":["MK","MV"],"params":[{"name":"mapper","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"MK"},{"k":7,"param":"MV"}]}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"MK"},{"k":7,"param":"MV"}]},"line":1709},{"typeParams":["MK","MV"],"params":[{"name":"mapper","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":0}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"MK"},{"k":7,"param":"MV"}]},"line":1717}],"doc":{"synopsis":"<p>Flat-maps the Iterable, returning an Iterable of the same type.</p>\n"}},"#flatten":{"signatures":[{"params":[{"name":"depth","optional":true,"type":{"k":2}}],"type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]},"line":1721},{"params":[{"name":"shallow","optional":true,"type":{"k":1}}],"type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]},"line":1736}],"doc":{"synopsis":"<p>Flattens nested Iterables.</p>\n","description":"<p>Will deeply flatten the Iterable by default, returning an Iterable of the\nsame type, but a <code>depth</code> can be provided in the form of a number or\nboolean (where true means to shallowly flatten one level). A depth of 0\n(or shallow: false) will deeply flatten.</p>\n<p>Flattens only others Iterable, not Arrays or Objects.</p>\n<p>Note: <code>flatten(true)</code> operates on Iterable<any, Iterable<K, V>&gt; and\nreturns Iterable<K, V></p>\n"}},"#groupBy":{"signatures":[{"typeParams":["G"],"params":[{"name":"grouper","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":7,"param":"G"}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":8,"name":"KeyedSeq","args":[{"k":7,"param":"G"},{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}]},"line":1737}],"doc":{"synopsis":"<p>Returns a <code>KeyedIterable</code> of <code>KeyedIterables</code>, grouped by the return\nvalue of the <code>grouper</code> function.</p>\n","description":"<p>Note: This is not a lazy operation.</p>\n"}},"#isSubset":{"signatures":[{"params":[{"name":"iter","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":7,"param":"V"}]}}],"type":{"k":1},"line":1748},{"params":[{"name":"iter","type":{"k":8,"name":"Array","args":[{"k":7,"param":"V"}]}}],"type":{"k":1},"line":1753}],"doc":{"synopsis":"<p>True if <code>iter</code> contains every value in this Iterable.</p>\n"}},"#isSuperset":{"signatures":[{"params":[{"name":"iter","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":7,"param":"V"}]}}],"type":{"k":1},"line":1754},{"params":[{"name":"iter","type":{"k":8,"name":"Array","args":[{"k":7,"param":"V"}]}}],"type":{"k":1},"line":1759}],"doc":{"synopsis":"<p>True if this Iterable contains every value in <code>iter</code>.</p>\n"}},"#max":{"signatures":[{"params":[{"name":"comparator","optional":true,"type":{"k":6,"params":[{"name":"valueA","type":{"k":7,"param":"V"}},{"name":"valueB","type":{"k":7,"param":"V"}}],"type":{"k":2}}}],"type":{"k":7,"param":"V"},"line":1760}],"doc":{"synopsis":"<p>Returns the maximum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n","description":"<p>The <code>comparator</code> is used in the same way as <code>Iterable#sort</code>. If it is not\nprovided, the default comparator is <code>a &gt; b</code>.</p>\n"}},"#maxBy":{"signatures":[{"typeParams":["C"],"params":[{"name":"comparatorValueMapper","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":7,"param":"C"}}},{"name":"comparator","optional":true,"type":{"k":6,"params":[{"name":"valueA","type":{"k":7,"param":"C"}},{"name":"valueB","type":{"k":7,"param":"C"}}],"type":{"k":2}}}],"type":{"k":7,"param":"V"},"line":1769}],"doc":{"synopsis":"<p>Like <code>max</code>, but also accepts a <code>comparatorValueMapper</code> which allows for\ncomparing by more sophisticated means:</p>\n","description":"<code class=\"codeBlock\">hitters<span class=\"token punctuation\" >.</span><span class=\"token function\" >maxBy<span class=\"token punctuation\" >(</span></span>hitter <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> hitter<span class=\"token punctuation\" >.</span>avgHits<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code>"}},"#min":{"signatures":[{"params":[{"name":"comparator","optional":true,"type":{"k":6,"params":[{"name":"valueA","type":{"k":7,"param":"V"}},{"name":"valueB","type":{"k":7,"param":"V"}}],"type":{"k":2}}}],"type":{"k":7,"param":"V"},"line":1781}],"doc":{"synopsis":"<p>Returns the maximum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n","description":"<p>The <code>comparator</code> is used in the same way as <code>Iterable#sort</code>. If it is not\nprovided, the default comparator is <code>a &gt; b</code>.</p>\n"}},"#minBy":{"signatures":[{"typeParams":["C"],"params":[{"name":"comparatorValueMapper","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":7,"param":"C"}}},{"name":"comparator","optional":true,"type":{"k":6,"params":[{"name":"valueA","type":{"k":7,"param":"C"}},{"name":"valueB","type":{"k":7,"param":"C"}}],"type":{"k":2}}}],"type":{"k":7,"param":"V"},"line":1790}],"doc":{"synopsis":"<p>Like <code>min</code>, but also accepts a <code>comparatorValueMapper</code> which allows for\ncomparing by more sophisticated means:</p>\n","description":"<code class=\"codeBlock\">hitters<span class=\"token punctuation\" >.</span><span class=\"token function\" >minBy<span class=\"token punctuation\" >(</span></span>hitter <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> hitter<span class=\"token punctuation\" >.</span>avgHits<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code>"}},"#rest":{"signatures":[{"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1802}],"doc":{"synopsis":"<p>Returns a new Iterable of the same type containing all entries except\nthe first.</p>\n"}},"#skip":{"signatures":[{"params":[{"name":"amount","type":{"k":2}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1808}],"doc":{"synopsis":"<p>Returns a new Iterable of the same type which excludes the first <code>amount</code>\nentries from this Iterable.</p>\n"}},"#skipLast":{"signatures":[{"params":[{"name":"amount","type":{"k":2}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1814}],"doc":{"synopsis":"<p>Returns a new Iterable of the same type which excludes the last <code>amount</code>\nentries from this Iterable.</p>\n"}},"#skipWhile":{"signatures":[{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1820}],"doc":{"synopsis":"<p>Returns a new Iterable of the same type which contains entries starting\nfrom when <code>predicate</code> first returns false.</p>\n","description":"<code class=\"codeBlock\">Seq<span class=\"token punctuation\" >.</span><span class=\"token function\" >of<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'god'</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span><span class=\"token function\" >skipWhile<span class=\"token punctuation\" >(</span></span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span><span class=\"token function\" >match<span class=\"token punctuation\" >(</span></span><span class=\"token regex\" >/g/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq [ 'cat', 'hat', 'god' ]</span></code>"}},"#skipUntil":{"signatures":[{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1834}],"doc":{"synopsis":"<p>Returns a new Iterable of the same type which contains entries starting\nfrom when <code>predicate</code> first returns true.</p>\n","description":"<code class=\"codeBlock\">Seq<span class=\"token punctuation\" >.</span><span class=\"token function\" >of<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'god'</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span><span class=\"token function\" >skipUntil<span class=\"token punctuation\" >(</span></span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span><span class=\"token function\" >match<span class=\"token punctuation\" >(</span></span><span class=\"token regex\" >/hat/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq [ 'hat', 'god' ]</span></code>"}},"#sortBy":{"signatures":[{"typeParams":["C"],"params":[{"name":"comparatorValueMapper","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":7,"param":"C"}}},{"name":"comparator","optional":true,"type":{"k":6,"params":[{"name":"valueA","type":{"k":7,"param":"C"}},{"name":"valueB","type":{"k":7,"param":"C"}}],"type":{"k":2}}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1848}],"doc":{"synopsis":"<p>Like <code>sort</code>, but also accepts a <code>comparatorValueMapper</code> which allows for\nsorting by more sophisticated means:</p>\n","description":"<code class=\"codeBlock\">hitters<span class=\"token punctuation\" >.</span><span class=\"token function\" >sortBy<span class=\"token punctuation\" >(</span></span>hitter <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> hitter<span class=\"token punctuation\" >.</span>avgHits<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code>"}},"#take":{"signatures":[{"params":[{"name":"amount","type":{"k":2}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1860}],"doc":{"synopsis":"<p>Returns a new Iterable of the same type which contains the first <code>amount</code>\nentries from this Iterable.</p>\n"}},"#takeLast":{"signatures":[{"params":[{"name":"amount","type":{"k":2}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1866}],"doc":{"synopsis":"<p>Returns a new Iterable of the same type which contains the last <code>amount</code>\nentries from this Iterable.</p>\n"}},"#takeWhile":{"signatures":[{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1872}],"doc":{"synopsis":"<p>Returns a new Iterable of the same type which contains entries from this\nIterable as long as the <code>predicate</code> returns true.</p>\n","description":"<code class=\"codeBlock\">Seq<span class=\"token punctuation\" >.</span><span class=\"token function\" >of<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'god'</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span><span class=\"token function\" >takeWhile<span class=\"token punctuation\" >(</span></span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span><span class=\"token function\" >match<span class=\"token punctuation\" >(</span></span><span class=\"token regex\" >/o/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq [ 'dog', 'frog' ]</span></code>"}},"#takeUntil":{"signatures":[{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1886}],"doc":{"synopsis":"<p>Returns a new Iterable of the same type which contains entries from this\nIterable as long as the <code>predicate</code> returns false.</p>\n","description":"<code class=\"codeBlock\">Seq<span class=\"token punctuation\" >.</span><span class=\"token function\" >of<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'god'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >takeUntil<span class=\"token punctuation\" >(</span></span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span><span class=\"token function\" >match<span class=\"token punctuation\" >(</span></span><span class=\"token regex\" >/at/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// ['dog', 'frog']</span></code>"}}}}]}},"KeyedIterable":{"doc":{"synopsis":"<p>Keyed Iterables have discrete keys tied to each value.</p>\n","description":"<p>When iterating <code>KeyedIterable</code>, each iteration will yield a <code>[K, V]</code> tuple,\nin other words, <code>Iterable#entries</code> is the default iterator for Keyed\nIterables.</p>\n"},"module":{},"call":{"signatures":[{"typeParams":["K","V"],"params":[{"name":"iter","type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1920},{"typeParams":["K","V"],"params":[{"name":"iter","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}}],"type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1928},{"typeParams":["K","V"],"params":[{"name":"array","type":{"k":8,"name":"Array","args":[{"k":0}]}}],"type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1929},{"typeParams":["V"],"params":[{"name":"obj","type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":7,"param":"V"}}]}}],"type":{"k":8,"name":"KeyedIterable","args":[{"k":3},{"k":7,"param":"V"}]},"line":1930},{"typeParams":["K","V"],"params":[{"name":"iterator","type":{"k":8,"name":"Iterator","args":[{"k":0}]}}],"type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1931},{"typeParams":["K","V"],"params":[{"name":"iterable","type":{"k":8,"name":"Object"}}],"type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1932}],"doc":{"synopsis":"<p>Creates a KeyedIterable</p>\n","description":"<p>Similar to <code>Iterable()</code>, however it expects iterable-likes of [K, V]\ntuples if not constructed from a KeyedIterable or JS Object.</p>\n"}},"interface":{"line":1933,"typeParams":["K","V"],"extends":[{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}],"groups":[{"methods":{"#toSeq":{"signatures":[{"type":{"k":8,"name":"KeyedSeq","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1935}],"doc":{"synopsis":"<p>Returns KeyedSeq.</p>\n"}}}},{"title":"Higher-order collection methods","methods":{"#flip":{"signatures":[{"type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"V"},{"k":7,"param":"K"}]},"line":1941}],"doc":{"synopsis":"<p>Returns a new KeyedIterable of the same type where the keys and values\nhave been flipped.</p>\n","description":"<code class=\"codeBlock\"><span class=\"token function\" >Seq<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'z'</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'y'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >flip<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// { z: 'a', y: 'b' }</span></code>"}},"#findKey":{"signatures":[{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":7,"param":"K"},"line":1953}],"doc":{"synopsis":"<p>Returns the key for which the <code>predicate</code> returns true.</p>\n"}},"#findLastKey":{"signatures":[{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":7,"param":"K"},"line":1961}],"doc":{"synopsis":"<p>Returns the last key for which the <code>predicate</code> returns true.</p>\n","description":"<p>Note: <code>predicate</code> will be called for each entry in reverse.</p>\n"}},"#keyOf":{"signatures":[{"params":[{"name":"searchValue","type":{"k":7,"param":"V"}}],"type":{"k":7,"param":"K"},"line":1971}],"doc":{"synopsis":"<p>Returns the key associated with the search value, or undefined.</p>\n"}},"#lastKeyOf":{"signatures":[{"params":[{"name":"searchValue","type":{"k":7,"param":"V"}}],"type":{"k":7,"param":"K"},"line":1976}],"doc":{"synopsis":"<p>Returns the last key associated with the search value, or undefined.</p>\n"}},"#mapEntries":{"signatures":[{"typeParams":["KM","VM"],"params":[{"name":"mapper","type":{"k":6,"params":[{"name":"entry","optional":true,"type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"index","optional":true,"type":{"k":2}},{"name":"iter","optional":true,"type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"Array","args":[{"k":0}]}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"KM"},{"k":7,"param":"VM"}]},"line":1981}],"doc":{"synopsis":"<p>Returns a new KeyedIterable of the same type with entries\n([key, value] tuples) passed through a <code>mapper</code> function.</p>\n","description":"<code class=\"codeBlock\"><span class=\"token function\" >Seq<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span><span class=\"token function\" >mapEntries<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>k<span class=\"token punctuation\" >,</span> v<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token punctuation\" >[</span>k<span class=\"token punctuation\" >.</span><span class=\"token function\" >toUpperCase<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> v <span class=\"token operator\" >*</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { A: 2, B: 4 }</span></code>"}},"#mapKeys":{"signatures":[{"typeParams":["M"],"params":[{"name":"mapper","type":{"k":6,"params":[{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"iter","optional":true,"type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":7,"param":"M"}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"M"},{"k":7,"param":"V"}]},"line":1999}],"doc":{"synopsis":"<p>Returns a new KeyedIterable of the same type with keys passed through a\n<code>mapper</code> function.</p>\n","description":"<code class=\"codeBlock\"><span class=\"token function\" >Seq<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span><span class=\"token function\" >mapKeys<span class=\"token punctuation\" >(</span></span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span><span class=\"token function\" >toUpperCase<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { A: 1, B: 2 }</span></code>"}}}}]}},"IndexedIterable":{"doc":{"synopsis":"<p>Indexed Iterables have incrementing numeric keys. They exhibit\nslightly different behavior than <code>KeyedIterable</code> for some methods in order\nto better mirror the behavior of JavaScript&#39;s <code>Array</code>, and add methods\nwhich do not make sense on non-indexed Iterables such as <code>indexOf</code>.</p>\n","description":"<p>Unlike JavaScript arrays, <code>IndexedIterable</code>s are always dense. &quot;Unset&quot;\nindices and <code>undefined</code> indices are indistinguishable, and all indices from\n0 to <code>size</code> are visited when iterated.</p>\n<p>All IndexedIterable methods return re-indexed Iterables. In other words,\nindices always start at 0 and increment until size. If you wish to\npreserve indices, using them as keys, convert to a KeyedIterable by calling\n<code>toKeyedSeq</code>.</p>\n"},"module":{},"call":{"signatures":[{"typeParams":["T"],"params":[{"name":"iter","type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]},"line":2032},{"typeParams":["T"],"params":[{"name":"iter","type":{"k":8,"name":"SetIterable","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]},"line":2037},{"typeParams":["K","V"],"params":[{"name":"iter","type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"IndexedIterable","args":[{"k":0}]},"line":2038},{"typeParams":["T"],"params":[{"name":"array","type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]},"line":2039},{"typeParams":["T"],"params":[{"name":"iterator","type":{"k":8,"name":"Iterator","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]},"line":2040},{"typeParams":["T"],"params":[{"name":"iterable","type":{"k":8,"name":"Object"}}],"type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]},"line":2041}],"doc":{"synopsis":"<p>Creates a new IndexedIterable.</p>\n"}},"interface":{"line":2042,"typeParams":["T"],"extends":[{"k":8,"name":"Iterable","args":[{"k":2},{"k":7,"param":"T"}]}],"groups":[{"title":"Reading values","methods":{"#get":{"signatures":[{"params":[{"name":"index","type":{"k":2}},{"name":"notSetValue","optional":true,"type":{"k":7,"param":"T"}}],"type":{"k":7,"param":"T"},"line":2044}],"doc":{"synopsis":"<p>Returns the value associated with the provided index, or notSetValue if\nthe index is beyond the bounds of the Iterable.</p>\n","description":"<p><code>index</code> may be a negative number, which indexes back from the end of the\nIterable. <code>s.get(-1)</code> gets the last item in the Iterable.</p>\n"}}}},{"title":"Conversion to lazy Seq","methods":{"#toSeq":{"signatures":[{"type":{"k":8,"name":"IndexedSeq","args":[{"k":7,"param":"T"}]},"line":2055}],"doc":{"synopsis":"<p>Returns IndexedSeq.</p>\n"}},"#fromEntrySeq":{"signatures":[{"type":{"k":8,"name":"KeyedSeq","args":[{"k":0},{"k":0}]},"line":2064}],"doc":{"synopsis":"<p>If this is an iterable of [key, value] entry tuples, it will return a\nKeyedSeq of those entries.</p>\n"}}}},{"title":"Persistent changes","methods":{"#splice":{"signatures":[{"params":[{"name":"index","type":{"k":2}},{"name":"removeNum","type":{"k":2}},{"name":"values","varArgs":true,"type":{"k":5,"type":{"k":0}}}],"type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]},"line":2070}],"doc":{"synopsis":"<p>Splice returns a new indexed Iterable by replacing a region of this\nIterable with new values. If values are not provided, it only skips the\nregion to be removed.</p>\n","description":"<p><code>index</code> may be a negative number, which indexes back from the end of the\nIterable. <code>s.splice(-2)</code> splices after the second to last item.</p>\n<code class=\"codeBlock\"><span class=\"token function\" >Seq<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'c'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'d'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >splice<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'q'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'r'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'s'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq ['a', 'q', 'r', 's', 'd']</span></code>"}}}},{"title":"Higher-order Collection methods (ES6)","methods":{"#findIndex":{"signatures":[{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"T"}},{"name":"index","optional":true,"type":{"k":2}},{"name":"iter","optional":true,"type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":2},"line":2091}],"doc":{"synopsis":"<p>Returns the first index in the Iterable where a value satisfies the\nprovided predicate function. Otherwise -1 is returned.</p>\n"}},"#indexOf":{"signatures":[{"params":[{"name":"searchValue","type":{"k":7,"param":"T"}}],"type":{"k":2},"line":2103}],"doc":{"synopsis":"<p>Returns the first index at which a given value can be found in the\nIterable, or -1 if it is not present.</p>\n"}},"#lastIndexOf":{"signatures":[{"params":[{"name":"searchValue","type":{"k":7,"param":"T"}}],"type":{"k":2},"line":2109}],"doc":{"synopsis":"<p>Returns the last index at which a given value can be found in the\nIterable, or -1 if it is not present.</p>\n"}}}},{"title":"Higher-order collection methods","methods":{"#findLastIndex":{"signatures":[{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"T"}},{"name":"index","optional":true,"type":{"k":2}},{"name":"iter","optional":true,"type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":2},"line":2115}],"doc":{"synopsis":"<p>Returns the last index in the Iterable where a value satisfies the\nprovided predicate function. Otherwise -1 is returned.</p>\n"}},"#interpose":{"signatures":[{"params":[{"name":"separator","type":{"k":7,"param":"T"}}],"type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]},"line":2127}],"doc":{"synopsis":"<p>Returns an Iterable of the same type with <code>separator</code> between each item\nin this Iterable.</p>\n"}}}}]}},"SetIterable":{"doc":{"synopsis":"<p>Set Iterables only represent values. They have no associated keys or\nindices. Duplicate values are possible in SetSeqs, however the\nconcrete <code>Set</code> does not allow duplicate values.</p>\n","description":"<p>Iterable methods on SetIterable such as <code>map</code> and <code>forEach</code> will provide\nthe value as both the first and second arguments to the provided function.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> seq <span class=\"token operator\" >=</span> SetSeq<span class=\"token punctuation\" >.</span><span class=\"token function\" >of<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'A'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'C'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nassert<span class=\"token punctuation\" >.</span><span class=\"token function\" >equal<span class=\"token punctuation\" >(</span></span>seq<span class=\"token punctuation\" >.</span><span class=\"token function\" >every<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >(</span>v<span class=\"token punctuation\" >,</span> k<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> v <span class=\"token operator\" >===</span> k<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >true</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code>"},"module":{},"call":{"signatures":[{"typeParams":["T"],"params":[{"name":"iter","type":{"k":8,"name":"SetIterable","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"SetIterable","args":[{"k":7,"param":"T"}]},"line":2149},{"typeParams":["T"],"params":[{"name":"iter","type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"SetIterable","args":[{"k":7,"param":"T"}]},"line":2154},{"typeParams":["K","V"],"params":[{"name":"iter","type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"SetIterable","args":[{"k":0}]},"line":2155},{"typeParams":["T"],"params":[{"name":"array","type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"SetIterable","args":[{"k":7,"param":"T"}]},"line":2156},{"typeParams":["T"],"params":[{"name":"iterator","type":{"k":8,"name":"Iterator","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"SetIterable","args":[{"k":7,"param":"T"}]},"line":2157},{"typeParams":["T"],"params":[{"name":"iterable","type":{"k":8,"name":"Object"}}],"type":{"k":8,"name":"SetIterable","args":[{"k":7,"param":"T"}]},"line":2158}],"doc":{"synopsis":"<p>Similar to <code>Iterable()</code>, but always returns a SetIterable.</p>\n"}},"interface":{"line":2159,"typeParams":["T"],"extends":[{"k":8,"name":"Iterable","args":[{"k":7,"param":"T"},{"k":7,"param":"T"}]}],"groups":[{"methods":{"#toSeq":{"signatures":[{"type":{"k":8,"name":"SetSeq","args":[{"k":7,"param":"T"}]},"line":2161}],"doc":{"synopsis":"<p>Returns SetSeq.</p>\n"}}}}]}},"Collection":{"interface":{"line":2168,"doc":{"synopsis":"<p>Collections are concrete data structures.</p>\n"},"typeParams":["K","V"],"extends":[{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}],"groups":[{"properties":{"#size":{"line":2174,"doc":{"synopsis":"<p>All collections maintain their current <code>size</code> as an integer.</p>\n"},"type":{"k":2}}}}]}},"KeyedCollection":{"interface":{"line":2180,"doc":{"synopsis":"<p>Collections which represent key value pairs.</p>\n"},"typeParams":["K","V"],"extends":[{"k":8,"name":"Collection","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}],"groups":[{"methods":{"#toSeq":{"signatures":[{"type":{"k":8,"name":"KeyedSeq","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":2186}],"doc":{"synopsis":"<p>Returns KeyedSeq.</p>\n"}}}}]}},"IndexedCollection":{"interface":{"line":2193,"doc":{"synopsis":"<p>Collections which represent ordered indexed values.</p>\n"},"typeParams":["T"],"extends":[{"k":8,"name":"Collection","args":[{"k":2},{"k":7,"param":"T"}]},{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]}],"groups":[{"methods":{"#toSeq":{"signatures":[{"type":{"k":8,"name":"IndexedSeq","args":[{"k":7,"param":"T"}]},"line":2199}],"doc":{"synopsis":"<p>Returns IndexedSeq.</p>\n"}}}}]}},"SetCollection":{"interface":{"line":2206,"doc":{"synopsis":"<p>Collections which represent only values, unassociated with keys or indices.</p>\n"},"typeParams":["T"],"extends":[{"k":8,"name":"Collection","args":[{"k":7,"param":"T"},{"k":7,"param":"T"}]},{"k":8,"name":"SetIterable","args":[{"k":7,"param":"T"}]}],"groups":[{"methods":{"#toSeq":{"signatures":[{"type":{"k":8,"name":"SetSeq","args":[{"k":7,"param":"T"}]},"line":2212}],"doc":{"synopsis":"<p>Returns SetSeq.</p>\n"}}}}]}}}}}